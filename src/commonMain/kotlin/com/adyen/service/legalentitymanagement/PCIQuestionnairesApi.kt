/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.service.legalentitymanagement

import com.adyen.model.legalentitymanagement.GeneratePciDescriptionRequest
import com.adyen.model.legalentitymanagement.GeneratePciDescriptionResponse
import com.adyen.model.legalentitymanagement.GetPciQuestionnaireInfosResponse
import com.adyen.model.legalentitymanagement.GetPciQuestionnaireResponse
import com.adyen.model.legalentitymanagement.PciSigningRequest
import com.adyen.model.legalentitymanagement.PciSigningResponse
import com.adyen.model.legalentitymanagement.ServiceError

import com.adyen.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class PCIQuestionnairesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Get PCI questionnaire details
     * Get a list of signed PCI questionnaires.
     * @param id The unique identifier of the legal entity to get PCI questionnaire information.
     * @return GetPciQuestionnaireInfosResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getLegalEntitiesIdPciQuestionnaires(id: kotlin.String): HttpResponse<GetPciQuestionnaireInfosResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/legalEntities/{id}/pciQuestionnaires".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get PCI questionnaire
     * Returns the signed PCI questionnaire.
     * @param id The legal entity ID of the individual who signed the PCI questionnaire.
     * @param pciid The unique identifier of the signed PCI questionnaire.
     * @return GetPciQuestionnaireResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getLegalEntitiesIdPciQuestionnairesPciid(id: kotlin.String, pciid: kotlin.String): HttpResponse<GetPciQuestionnaireResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/legalEntities/{id}/pciQuestionnaires/{pciid}".replace("{" + "id" + "}", "$id").replace("{" + "pciid" + "}", "$pciid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Generate PCI questionnaire
     * Generates the required PCI questionnaires based on the user&#39;s [salesChannel](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__reqParam_salesChannels).
     * @param id The unique identifier of the legal entity to get PCI questionnaire information.
     * @param generatePciDescriptionRequest  (optional)
     * @return GeneratePciDescriptionResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postLegalEntitiesIdPciQuestionnairesGeneratePciTemplates(id: kotlin.String, generatePciDescriptionRequest: GeneratePciDescriptionRequest? = null): HttpResponse<GeneratePciDescriptionResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = generatePciDescriptionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/legalEntities/{id}/pciQuestionnaires/generatePciTemplates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Sign PCI questionnaire
     * Signs the required PCI questionnaire.
     * @param id The legal entity ID of the individual who signed the PCI questionnaire.
     * @param pciSigningRequest  (optional)
     * @return PciSigningResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postLegalEntitiesIdPciQuestionnairesSignPciTemplates(id: kotlin.String, pciSigningRequest: PciSigningRequest? = null): HttpResponse<PciSigningResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = pciSigningRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/legalEntities/{id}/pciQuestionnaires/signPciTemplates".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
