/**
 * Adyen Stored Value API
 *
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.service.storedvalue

import com.adyen.model.storedvalue.ServiceError
import com.adyen.model.storedvalue.StoredValueBalanceCheckRequest
import com.adyen.model.storedvalue.StoredValueBalanceCheckResponse
import com.adyen.model.storedvalue.StoredValueBalanceMergeRequest
import com.adyen.model.storedvalue.StoredValueBalanceMergeResponse
import com.adyen.model.storedvalue.StoredValueIssueRequest
import com.adyen.model.storedvalue.StoredValueIssueResponse
import com.adyen.model.storedvalue.StoredValueLoadRequest
import com.adyen.model.storedvalue.StoredValueLoadResponse
import com.adyen.model.storedvalue.StoredValueStatusChangeRequest
import com.adyen.model.storedvalue.StoredValueStatusChangeResponse
import com.adyen.model.storedvalue.StoredValueVoidRequest
import com.adyen.model.storedvalue.StoredValueVoidResponse

import com.adyen.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class GeneralApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Changes the status of the payment method.
     * Changes the status of the provided payment method to the specified status.
     * @param storedValueStatusChangeRequest  (optional)
     * @return StoredValueStatusChangeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postChangeStatus(storedValueStatusChangeRequest: StoredValueStatusChangeRequest? = null): HttpResponse<StoredValueStatusChangeResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueStatusChangeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/changeStatus",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Checks the balance.
     * Checks the balance of the provided payment method.
     * @param storedValueBalanceCheckRequest  (optional)
     * @return StoredValueBalanceCheckResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postCheckBalance(storedValueBalanceCheckRequest: StoredValueBalanceCheckRequest? = null): HttpResponse<StoredValueBalanceCheckResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueBalanceCheckRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/checkBalance",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Issues a new card.
     * Issues a new card of the given payment method.
     * @param storedValueIssueRequest  (optional)
     * @return StoredValueIssueResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postIssue(storedValueIssueRequest: StoredValueIssueRequest? = null): HttpResponse<StoredValueIssueResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueIssueRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issue",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Loads the payment method.
     * Loads the payment method with the specified funds.
     * @param storedValueLoadRequest  (optional)
     * @return StoredValueLoadResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postLoad(storedValueLoadRequest: StoredValueLoadRequest? = null): HttpResponse<StoredValueLoadResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueLoadRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/load",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Merge the balance of two cards.
     * Increases the balance of the paymentmethod by the full amount left on the source paymentmethod
     * @param storedValueBalanceMergeRequest  (optional)
     * @return StoredValueBalanceMergeResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMergeBalance(storedValueBalanceMergeRequest: StoredValueBalanceMergeRequest? = null): HttpResponse<StoredValueBalanceMergeResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueBalanceMergeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/mergeBalance",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Voids a transaction.
     * Voids the referenced stored value transaction.
     * @param storedValueVoidRequest  (optional)
     * @return StoredValueVoidResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postVoidTransaction(storedValueVoidRequest: StoredValueVoidRequest? = null): HttpResponse<StoredValueVoidResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = storedValueVoidRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/voidTransaction",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
