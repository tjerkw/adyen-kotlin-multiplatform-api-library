/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.service.management

import com.adyen.model.management.ApplePayInfo
import com.adyen.model.management.PaymentMethod
import com.adyen.model.management.PaymentMethodResponse
import com.adyen.model.management.PaymentMethodSetupInfo
import com.adyen.model.management.RestServiceError
import com.adyen.model.management.UpdatePaymentMethodInfo

import com.adyen.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class PaymentMethodsMerchantLevelApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Get all payment methods
     * Returns details for all payment methods of the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     * @param merchantId The unique identifier of the merchant account.
     * @param storeId The unique identifier of the store for which to return the payment methods. (optional)
     * @param businessLineId The unique identifier of the Business Line for which to return the payment methods. (optional)
     * @param pageSize The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)
     * @param pageNumber The number of the page to fetch. (optional)
     * @return PaymentMethodResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMerchantsMerchantIdPaymentMethodSettings(merchantId: kotlin.String, storeId: kotlin.String? = null, businessLineId: kotlin.String? = null, pageSize: kotlin.Int? = null, pageNumber: kotlin.Int? = null): HttpResponse<PaymentMethodResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        storeId?.apply { localVariableQuery["storeId"] = listOf("$storeId") }
        businessLineId?.apply { localVariableQuery["businessLineId"] = listOf("$businessLineId") }
        pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
        pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/merchants/{merchantId}/paymentMethodSettings".replace("{" + "merchantId" + "}", "$merchantId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get payment method details
     * Returns details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     * @param merchantId The unique identifier of the merchant account.
     * @param paymentMethodId The unique identifier of the payment method.
     * @return PaymentMethod
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(merchantId: kotlin.String, paymentMethodId: kotlin.String): HttpResponse<PaymentMethod> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "paymentMethodId" + "}", "$paymentMethodId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Apple Pay domains
     * Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     * @param merchantId The unique identifier of the merchant account.
     * @param paymentMethodId The unique identifier of the payment method.
     * @return ApplePayInfo
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains(merchantId: kotlin.String, paymentMethodId: kotlin.String): HttpResponse<ApplePayInfo> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "paymentMethodId" + "}", "$paymentMethodId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update a payment method
     * Updates payment method details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     * @param merchantId The unique identifier of the merchant account.
     * @param paymentMethodId The unique identifier of the payment method.
     * @param updatePaymentMethodInfo  (optional)
     * @return PaymentMethod
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(merchantId: kotlin.String, paymentMethodId: kotlin.String, updatePaymentMethodInfo: UpdatePaymentMethodInfo? = null): HttpResponse<PaymentMethod> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = updatePaymentMethodInfo

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "paymentMethodId" + "}", "$paymentMethodId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Request a payment method
     * Sends a request to add a new payment method to the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     * @param merchantId The unique identifier of the merchant account.
     * @param paymentMethodSetupInfo  (optional)
     * @return PaymentMethod
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMerchantsMerchantIdPaymentMethodSettings(merchantId: kotlin.String, paymentMethodSetupInfo: PaymentMethodSetupInfo? = null): HttpResponse<PaymentMethod> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = paymentMethodSetupInfo

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merchants/{merchantId}/paymentMethodSettings".replace("{" + "merchantId" + "}", "$merchantId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Add an Apple Pay domain
     * Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     * @param merchantId The unique identifier of the merchant account.
     * @param paymentMethodId The unique identifier of the payment method.
     * @param applePayInfo  (optional)
     * @return void
     */
    open suspend fun postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains(merchantId: kotlin.String, paymentMethodId: kotlin.String, applePayInfo: ApplePayInfo? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = applePayInfo

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "paymentMethodId" + "}", "$paymentMethodId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
