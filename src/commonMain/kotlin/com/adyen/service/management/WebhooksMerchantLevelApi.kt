/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.service.management

import com.adyen.model.management.CreateMerchantWebhookRequest
import com.adyen.model.management.GenerateHmacKeyResponse
import com.adyen.model.management.ListWebhooksResponse
import com.adyen.model.management.RestServiceError
import com.adyen.model.management.TestWebhookRequest
import com.adyen.model.management.TestWebhookResponse
import com.adyen.model.management.UpdateMerchantWebhookRequest
import com.adyen.model.management.Webhook

import com.adyen.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class WebhooksMerchantLevelApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonSerializer) {

    /**
     * Remove a webhook
     * Remove the configuration for the webhook identified in the path.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @return void
     */
    open suspend fun deleteMerchantsMerchantIdWebhooksWebhookId(merchantId: kotlin.String, webhookId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/merchants/{merchantId}/webhooks/{webhookId}".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List all webhooks
     * Lists all webhook configurations for the merchant account.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param pageNumber The number of the page to fetch. (optional)
     * @param pageSize The number of items to have on a page, maximum 100. The default is 10 items on a page. (optional)
     * @return ListWebhooksResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMerchantsMerchantIdWebhooks(merchantId: kotlin.String, pageNumber: kotlin.Int? = null, pageSize: kotlin.Int? = null): HttpResponse<ListWebhooksResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        pageNumber?.apply { localVariableQuery["pageNumber"] = listOf("$pageNumber") }
        pageSize?.apply { localVariableQuery["pageSize"] = listOf("$pageSize") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/merchants/{merchantId}/webhooks".replace("{" + "merchantId" + "}", "$merchantId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a webhook
     * Returns the configuration for the webhook identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getMerchantsMerchantIdWebhooksWebhookId(merchantId: kotlin.String, webhookId: kotlin.String): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/merchants/{merchantId}/webhooks/{webhookId}".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update a webhook
     * Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @param updateMerchantWebhookRequest  (optional)
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun patchMerchantsMerchantIdWebhooksWebhookId(merchantId: kotlin.String, webhookId: kotlin.String, updateMerchantWebhookRequest: UpdateMerchantWebhookRequest? = null): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = updateMerchantWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/merchants/{merchantId}/webhooks/{webhookId}".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Set up a webhook
     * Subscribe to receive webhook notifications about events related to your merchant account. You can add basic authentication to make sure the data is secure.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param createMerchantWebhookRequest  (optional)
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMerchantsMerchantIdWebhooks(merchantId: kotlin.String, createMerchantWebhookRequest: CreateMerchantWebhookRequest? = null): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = createMerchantWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merchants/{merchantId}/webhooks".replace("{" + "merchantId" + "}", "$merchantId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Generate an HMAC key
     * Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId 
     * @return GenerateHmacKeyResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMerchantsMerchantIdWebhooksWebhookIdGenerateHmac(merchantId: kotlin.String, webhookId: kotlin.String): HttpResponse<GenerateHmacKeyResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merchants/{merchantId}/webhooks/{webhookId}/generateHmac".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Test a webhook
     * Sends sample notifications to test if the webhook is set up correctly.  We send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.  The response describes the result of the test. The &#x60;status&#x60; field tells you if the test was successful or not. You can use the other fields to troubleshoot unsuccessful tests.  To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Webhooks read and write
     * @param merchantId The unique identifier of the merchant account.
     * @param webhookId Unique identifier of the webhook configuration.
     * @param testWebhookRequest  (optional)
     * @return TestWebhookResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun postMerchantsMerchantIdWebhooksWebhookIdTest(merchantId: kotlin.String, webhookId: kotlin.String, testWebhookRequest: TestWebhookRequest? = null): HttpResponse<TestWebhookResponse> {

        val localVariableAuthNames = listOf<String>("ApiKeyAuth", "BasicAuth")

        val localVariableBody = testWebhookRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merchants/{merchantId}/webhooks/{webhookId}/test".replace("{" + "merchantId" + "}", "$merchantId").replace("{" + "webhookId" + "}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
