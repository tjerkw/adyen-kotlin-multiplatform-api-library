/**
 * Transfers API
 *
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transfers

import com.adyen.model.transfers.Amount
import com.adyen.model.transfers.CounterpartyV3
import com.adyen.model.transfers.PaymentInstrument
import com.adyen.model.transfers.ResourceReference
import com.adyen.model.transfers.TransferCategoryData

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount 
 * @param category The category of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
 * @param counterparty 
 * @param status The result of the transfer.   For example, **authorised**, **refused**, or **error**.
 * @param accountHolder 
 * @param balanceAccount 
 * @param categoryData 
 * @param creationDate The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @param description Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**
 * @param direction The direction of the transfer.  Possible values: **incoming**, **outgoing**.
 * @param id The ID of the resource.
 * @param paymentInstrument 
 * @param reason Additional information about the status of the transfer.
 * @param reference Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
 * @param referenceForBeneficiary  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
 */
@Serializable
data class Transfer (

    @SerialName(value = "amount") @Required val amount: Amount,

    /* The category of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users. */
    @SerialName(value = "category") @Required val category: Transfer.Category,

    @SerialName(value = "counterparty") @Required val counterparty: CounterpartyV3,

    /* The result of the transfer.   For example, **authorised**, **refused**, or **error**. */
    @SerialName(value = "status") @Required val status: Transfer.Status,

    @SerialName(value = "accountHolder") val accountHolder: ResourceReference? = null,

    @SerialName(value = "balanceAccount") val balanceAccount: ResourceReference? = null,

    @SerialName(value = "categoryData") val categoryData: TransferCategoryData? = null,

    /* The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**. */
    @SerialName(value = "creationDate") val creationDate: kotlin.String? = null,

    /* Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?** */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* The direction of the transfer.  Possible values: **incoming**, **outgoing**. */
    @SerialName(value = "direction") val direction: Transfer.Direction? = null,

    /* The ID of the resource. */
    @SerialName(value = "id") val id: kotlin.String? = null,

    @SerialName(value = "paymentInstrument") val paymentInstrument: PaymentInstrument? = null,

    /* Additional information about the status of the transfer. */
    @SerialName(value = "reason") val reason: Transfer.Reason? = null,

    /* Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference. */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /*  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others. */
    @SerialName(value = "referenceForBeneficiary") val referenceForBeneficiary: kotlin.String? = null

) {

    /**
     * The category of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.
     *
     * Values: Bank,Internal,IssuedCard,PlatformPayment
     */
    @Serializable
    enum class Category(val value: kotlin.String) {
        @SerialName(value = "bank") Bank("bank"),
        @SerialName(value = "internal") Internal("internal"),
        @SerialName(value = "issuedCard") IssuedCard("issuedCard"),
        @SerialName(value = "platformPayment") PlatformPayment("platformPayment");
    }
    /**
     * The result of the transfer.   For example, **authorised**, **refused**, or **error**.
     *
     * Values: ApprovalPending,AtmWithdrawal,AtmWithdrawalReversalPending,AtmWithdrawalReversed,AuthAdjustmentAuthorised,AuthAdjustmentError,AuthAdjustmentRefused,Authorised,BankTransfer,BankTransferPending,Booked,BookingPending,Cancelled,CapturePending,CaptureReversalPending,CaptureReversed,Captured,CapturedExternally,Chargeback,ChargebackExternally,ChargebackPending,ChargebackReversalPending,ChargebackReversed,Credited,DepositCorrection,DepositCorrectionPending,Dispute,DisputeClosed,DisputeExpired,DisputeNeedsReview,Error,Expired,Failed,Fee,FeePending,InternalTransfer,InternalTransferPending,InvoiceDeduction,InvoiceDeductionPending,ManualCorrectionPending,ManuallyCorrected,MatchedStatement,MatchedStatementPending,MerchantPayin,MerchantPayinPending,MerchantPayinReversed,MerchantPayinReversedPending,MiscCost,MiscCostPending,PaymentCost,PaymentCostPending,Received,RefundPending,RefundReversalPending,RefundReversed,Refunded,RefundedExternally,Refused,ReserveAdjustment,ReserveAdjustmentPending,Returned,SecondChargeback,SecondChargebackPending,Undefined
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "approvalPending") ApprovalPending("approvalPending"),
        @SerialName(value = "atmWithdrawal") AtmWithdrawal("atmWithdrawal"),
        @SerialName(value = "atmWithdrawalReversalPending") AtmWithdrawalReversalPending("atmWithdrawalReversalPending"),
        @SerialName(value = "atmWithdrawalReversed") AtmWithdrawalReversed("atmWithdrawalReversed"),
        @SerialName(value = "authAdjustmentAuthorised") AuthAdjustmentAuthorised("authAdjustmentAuthorised"),
        @SerialName(value = "authAdjustmentError") AuthAdjustmentError("authAdjustmentError"),
        @SerialName(value = "authAdjustmentRefused") AuthAdjustmentRefused("authAdjustmentRefused"),
        @SerialName(value = "authorised") Authorised("authorised"),
        @SerialName(value = "bankTransfer") BankTransfer("bankTransfer"),
        @SerialName(value = "bankTransferPending") BankTransferPending("bankTransferPending"),
        @SerialName(value = "booked") Booked("booked"),
        @SerialName(value = "bookingPending") BookingPending("bookingPending"),
        @SerialName(value = "cancelled") Cancelled("cancelled"),
        @SerialName(value = "capturePending") CapturePending("capturePending"),
        @SerialName(value = "captureReversalPending") CaptureReversalPending("captureReversalPending"),
        @SerialName(value = "captureReversed") CaptureReversed("captureReversed"),
        @SerialName(value = "captured") Captured("captured"),
        @SerialName(value = "capturedExternally") CapturedExternally("capturedExternally"),
        @SerialName(value = "chargeback") Chargeback("chargeback"),
        @SerialName(value = "chargebackExternally") ChargebackExternally("chargebackExternally"),
        @SerialName(value = "chargebackPending") ChargebackPending("chargebackPending"),
        @SerialName(value = "chargebackReversalPending") ChargebackReversalPending("chargebackReversalPending"),
        @SerialName(value = "chargebackReversed") ChargebackReversed("chargebackReversed"),
        @SerialName(value = "credited") Credited("credited"),
        @SerialName(value = "depositCorrection") DepositCorrection("depositCorrection"),
        @SerialName(value = "depositCorrectionPending") DepositCorrectionPending("depositCorrectionPending"),
        @SerialName(value = "dispute") Dispute("dispute"),
        @SerialName(value = "disputeClosed") DisputeClosed("disputeClosed"),
        @SerialName(value = "disputeExpired") DisputeExpired("disputeExpired"),
        @SerialName(value = "disputeNeedsReview") DisputeNeedsReview("disputeNeedsReview"),
        @SerialName(value = "error") Error("error"),
        @SerialName(value = "expired") Expired("expired"),
        @SerialName(value = "failed") Failed("failed"),
        @SerialName(value = "fee") Fee("fee"),
        @SerialName(value = "feePending") FeePending("feePending"),
        @SerialName(value = "internalTransfer") InternalTransfer("internalTransfer"),
        @SerialName(value = "internalTransferPending") InternalTransferPending("internalTransferPending"),
        @SerialName(value = "invoiceDeduction") InvoiceDeduction("invoiceDeduction"),
        @SerialName(value = "invoiceDeductionPending") InvoiceDeductionPending("invoiceDeductionPending"),
        @SerialName(value = "manualCorrectionPending") ManualCorrectionPending("manualCorrectionPending"),
        @SerialName(value = "manuallyCorrected") ManuallyCorrected("manuallyCorrected"),
        @SerialName(value = "matchedStatement") MatchedStatement("matchedStatement"),
        @SerialName(value = "matchedStatementPending") MatchedStatementPending("matchedStatementPending"),
        @SerialName(value = "merchantPayin") MerchantPayin("merchantPayin"),
        @SerialName(value = "merchantPayinPending") MerchantPayinPending("merchantPayinPending"),
        @SerialName(value = "merchantPayinReversed") MerchantPayinReversed("merchantPayinReversed"),
        @SerialName(value = "merchantPayinReversedPending") MerchantPayinReversedPending("merchantPayinReversedPending"),
        @SerialName(value = "miscCost") MiscCost("miscCost"),
        @SerialName(value = "miscCostPending") MiscCostPending("miscCostPending"),
        @SerialName(value = "paymentCost") PaymentCost("paymentCost"),
        @SerialName(value = "paymentCostPending") PaymentCostPending("paymentCostPending"),
        @SerialName(value = "received") Received("received"),
        @SerialName(value = "refundPending") RefundPending("refundPending"),
        @SerialName(value = "refundReversalPending") RefundReversalPending("refundReversalPending"),
        @SerialName(value = "refundReversed") RefundReversed("refundReversed"),
        @SerialName(value = "refunded") Refunded("refunded"),
        @SerialName(value = "refundedExternally") RefundedExternally("refundedExternally"),
        @SerialName(value = "refused") Refused("refused"),
        @SerialName(value = "reserveAdjustment") ReserveAdjustment("reserveAdjustment"),
        @SerialName(value = "reserveAdjustmentPending") ReserveAdjustmentPending("reserveAdjustmentPending"),
        @SerialName(value = "returned") Returned("returned"),
        @SerialName(value = "secondChargeback") SecondChargeback("secondChargeback"),
        @SerialName(value = "secondChargebackPending") SecondChargebackPending("secondChargebackPending"),
        @SerialName(value = "undefined") Undefined("undefined");
    }
    /**
     * The direction of the transfer.  Possible values: **incoming**, **outgoing**.
     *
     * Values: Incoming,Outgoing
     */
    @Serializable
    enum class Direction(val value: kotlin.String) {
        @SerialName(value = "incoming") Incoming("incoming"),
        @SerialName(value = "outgoing") Outgoing("outgoing");
    }
    /**
     * Additional information about the status of the transfer.
     *
     * Values: AmountLimitExceeded,Approved,BalanceAccountTemporarilyBlockedByTransactionRule,CounterpartyAccountBlocked,CounterpartyAccountClosed,CounterpartyAccountNotFound,CounterpartyAddressRequired,CounterpartyBankTimedOut,CounterpartyBankUnavailable,DeclinedByTransactionRule,Error,NotEnoughBalance,RefusedByCounterpartyBank,RouteNotFound,ScaFailed,Unknown
     */
    @Serializable
    enum class Reason(val value: kotlin.String) {
        @SerialName(value = "amountLimitExceeded") AmountLimitExceeded("amountLimitExceeded"),
        @SerialName(value = "approved") Approved("approved"),
        @SerialName(value = "balanceAccountTemporarilyBlockedByTransactionRule") BalanceAccountTemporarilyBlockedByTransactionRule("balanceAccountTemporarilyBlockedByTransactionRule"),
        @SerialName(value = "counterpartyAccountBlocked") CounterpartyAccountBlocked("counterpartyAccountBlocked"),
        @SerialName(value = "counterpartyAccountClosed") CounterpartyAccountClosed("counterpartyAccountClosed"),
        @SerialName(value = "counterpartyAccountNotFound") CounterpartyAccountNotFound("counterpartyAccountNotFound"),
        @SerialName(value = "counterpartyAddressRequired") CounterpartyAddressRequired("counterpartyAddressRequired"),
        @SerialName(value = "counterpartyBankTimedOut") CounterpartyBankTimedOut("counterpartyBankTimedOut"),
        @SerialName(value = "counterpartyBankUnavailable") CounterpartyBankUnavailable("counterpartyBankUnavailable"),
        @SerialName(value = "declinedByTransactionRule") DeclinedByTransactionRule("declinedByTransactionRule"),
        @SerialName(value = "error") Error("error"),
        @SerialName(value = "notEnoughBalance") NotEnoughBalance("notEnoughBalance"),
        @SerialName(value = "refusedByCounterpartyBank") RefusedByCounterpartyBank("refusedByCounterpartyBank"),
        @SerialName(value = "routeNotFound") RouteNotFound("routeNotFound"),
        @SerialName(value = "scaFailed") ScaFailed("scaFailed"),
        @SerialName(value = "unknown") Unknown("unknown");
    }
}

