/**
 * Transfers API
 *
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transfers

import com.adyen.model.transfers.Amount
import com.adyen.model.transfers.ResourceReference
import com.adyen.model.transfers.TransferData

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param accountHolder 
 * @param amount 
 * @param balanceAccount 
 * @param balancePlatform The unique identifier of the balance platform.
 * @param bookingDate The date the transaction was booked into the balance account.
 * @param id The unique identifier of the transaction.
 * @param status The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
 * @param valueDate The date the transfer amount becomes available in the balance account.
 * @param creationDate The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @param transfer 
 */
@Serializable
data class Transaction (

    @SerialName(value = "accountHolder") @Required val accountHolder: ResourceReference,

    @SerialName(value = "amount") @Required val amount: Amount,

    @SerialName(value = "balanceAccount") @Required val balanceAccount: ResourceReference,

    /* The unique identifier of the balance platform. */
    @SerialName(value = "balancePlatform") @Required val balancePlatform: kotlin.String,

    /* The date the transaction was booked into the balance account. */
    @SerialName(value = "bookingDate") @Required val bookingDate: kotlin.String,

    /* The unique identifier of the transaction. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.   */
    @SerialName(value = "status") @Required val status: Transaction.Status,

    /* The date the transfer amount becomes available in the balance account. */
    @SerialName(value = "valueDate") @Required val valueDate: kotlin.String,

    /* The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**. */
    @SerialName(value = "creationDate") val creationDate: kotlin.String? = null,

    @SerialName(value = "transfer") val transfer: TransferData? = null

) {

    /**
     * The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
     *
     * Values: Booked,Pending
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "booked") Booked("booked"),
        @SerialName(value = "pending") Pending("pending");
    }
}

