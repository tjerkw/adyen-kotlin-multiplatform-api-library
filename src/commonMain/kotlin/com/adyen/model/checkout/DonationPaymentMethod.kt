/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout

import com.adyen.model.checkout.ApplePayDetails
import com.adyen.model.checkout.CardDetails
import com.adyen.model.checkout.GooglePayDetails
import com.adyen.model.checkout.IdealDetails
import com.adyen.model.checkout.PayWithGoogleDetails

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * The type and required details of a payment method to use.
 *
 * @param applePayToken The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.
 * @param googlePayToken The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.
 * @param issuer The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it.
 * @param checkoutAttemptId The checkout attempt identifier.
 * @param fundingSource The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
 * @param recurringDetailReference This is the `recurringDetailReference` returned in the response when you created the token.
 * @param storedPaymentMethodId This is the `recurringDetailReference` returned in the response when you created the token.
 * @param type **paywithgoogle**
 * @param brand Secondary brand of the card. For example: **plastix**, **hmclub**.
 * @param cupsecureplusSmscode 
 * @param cvc The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @param encryptedCardNumber The encrypted card number.
 * @param encryptedExpiryMonth The encrypted card expiry month.
 * @param encryptedExpiryYear The encrypted card expiry year.
 * @param encryptedSecurityCode The encrypted card verification code.
 * @param expiryMonth The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @param expiryYear The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @param holderName The name of the card holder.
 * @param networkPaymentReference The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
 * @param number The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @param shopperNotificationReference The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
 * @param threeDS2SdkVersion Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
 */
@Serializable
data class DonationPaymentMethod (

    /* The stringified and base64 encoded `paymentData` you retrieved from the Apple framework. */
    @SerialName(value = "applePayToken") @Required val applePayToken: kotlin.String,

    /* The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response. */
    @SerialName(value = "googlePayToken") @Required val googlePayToken: kotlin.String,

    /* The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it. */
    @SerialName(value = "issuer") @Required val issuer: kotlin.String,

    /* The checkout attempt identifier. */
    @SerialName(value = "checkoutAttemptId") val checkoutAttemptId: kotlin.String? = null,

    /* The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**. */
    @SerialName(value = "fundingSource") val fundingSource: DonationPaymentMethod.FundingSource? = null,

    /* This is the `recurringDetailReference` returned in the response when you created the token. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "recurringDetailReference") val recurringDetailReference: kotlin.String? = null,

    /* This is the `recurringDetailReference` returned in the response when you created the token. */
    @SerialName(value = "storedPaymentMethodId") val storedPaymentMethodId: kotlin.String? = null,

    /* **paywithgoogle** */
    @SerialName(value = "type") val type: DonationPaymentMethod.Type? = Type.Paywithgoogle,

    /* Secondary brand of the card. For example: **plastix**, **hmclub**. */
    @SerialName(value = "brand") val brand: kotlin.String? = null,

    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "cupsecureplus.smscode") val cupsecureplusSmscode: kotlin.String? = null,

    /* The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide). */
    @SerialName(value = "cvc") val cvc: kotlin.String? = null,

    /* The encrypted card number. */
    @SerialName(value = "encryptedCardNumber") val encryptedCardNumber: kotlin.String? = null,

    /* The encrypted card expiry month. */
    @SerialName(value = "encryptedExpiryMonth") val encryptedExpiryMonth: kotlin.String? = null,

    /* The encrypted card expiry year. */
    @SerialName(value = "encryptedExpiryYear") val encryptedExpiryYear: kotlin.String? = null,

    /* The encrypted card verification code. */
    @SerialName(value = "encryptedSecurityCode") val encryptedSecurityCode: kotlin.String? = null,

    /* The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide). */
    @SerialName(value = "expiryMonth") val expiryMonth: kotlin.String? = null,

    /* The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide). */
    @SerialName(value = "expiryYear") val expiryYear: kotlin.String? = null,

    /* The name of the card holder. */
    @SerialName(value = "holderName") val holderName: kotlin.String? = null,

    /* The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment. */
    @SerialName(value = "networkPaymentReference") val networkPaymentReference: kotlin.String? = null,

    /* The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide). */
    @SerialName(value = "number") val number: kotlin.String? = null,

    /* The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India. */
    @SerialName(value = "shopperNotificationReference") val shopperNotificationReference: kotlin.String? = null,

    /* Required for mobile integrations. Version of the 3D Secure 2 mobile SDK. */
    @SerialName(value = "threeDS2SdkVersion") val threeDS2SdkVersion: kotlin.String? = null

) {

    /**
     * The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
     *
     * Values: Credit,Debit
     */
    @Serializable
    enum class FundingSource(val value: kotlin.String) {
        @SerialName(value = "credit") Credit("credit"),
        @SerialName(value = "debit") Debit("debit");
    }
    /**
     * **paywithgoogle**
     *
     * Values: Paywithgoogle
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "paywithgoogle") Paywithgoogle("paywithgoogle");
    }
}

