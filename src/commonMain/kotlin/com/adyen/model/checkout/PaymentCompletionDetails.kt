/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param MD A payment session identifier returned by the card issuer.
 * @param paReq (3D) Payment Authentication Request data for the card issuer.
 * @param paRes (3D) Payment Authentication Response data by the card issuer.
 * @param authorizationToken 
 * @param billingToken PayPal-generated token for recurring payments.
 * @param cupsecureplusSmscode The SMS verification code collected from the shopper.
 * @param facilitatorAccessToken PayPal-generated third party access token.
 * @param oneTimePasscode A random number sent to the mobile phone number of the shopper to verify the payment.
 * @param orderID PayPal-assigned ID for the order.
 * @param payerID PayPal-assigned ID for the payer (shopper).
 * @param payload Payload appended to the `returnURL` as a result of the redirect.
 * @param paymentID PayPal-generated ID for the payment.
 * @param paymentStatus Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`.
 * @param redirectResult The result of the redirect as appended to the `returnURL`.
 * @param resultCode Value you received from the WeChat Pay SDK.
 * @param threeDSResult Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.
 * @param threeds2ChallengeResult Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.
 * @param threeds2Fingerprint Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.
 */
@Serializable
data class PaymentCompletionDetails (

    /* A payment session identifier returned by the card issuer. */
    @SerialName(value = "MD") val MD: kotlin.String? = null,

    /* (3D) Payment Authentication Request data for the card issuer. */
    @SerialName(value = "PaReq") val paReq: kotlin.String? = null,

    /* (3D) Payment Authentication Response data by the card issuer. */
    @SerialName(value = "PaRes") val paRes: kotlin.String? = null,

    @SerialName(value = "authorization_token") val authorizationToken: kotlin.String? = null,

    /* PayPal-generated token for recurring payments. */
    @SerialName(value = "billingToken") val billingToken: kotlin.String? = null,

    /* The SMS verification code collected from the shopper. */
    @SerialName(value = "cupsecureplus.smscode") val cupsecureplusSmscode: kotlin.String? = null,

    /* PayPal-generated third party access token. */
    @SerialName(value = "facilitatorAccessToken") val facilitatorAccessToken: kotlin.String? = null,

    /* A random number sent to the mobile phone number of the shopper to verify the payment. */
    @SerialName(value = "oneTimePasscode") val oneTimePasscode: kotlin.String? = null,

    /* PayPal-assigned ID for the order. */
    @SerialName(value = "orderID") val orderID: kotlin.String? = null,

    /* PayPal-assigned ID for the payer (shopper). */
    @SerialName(value = "payerID") val payerID: kotlin.String? = null,

    /* Payload appended to the `returnURL` as a result of the redirect. */
    @SerialName(value = "payload") val payload: kotlin.String? = null,

    /* PayPal-generated ID for the payment. */
    @SerialName(value = "paymentID") val paymentID: kotlin.String? = null,

    /* Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`. */
    @SerialName(value = "paymentStatus") val paymentStatus: kotlin.String? = null,

    /* The result of the redirect as appended to the `returnURL`. */
    @SerialName(value = "redirectResult") val redirectResult: kotlin.String? = null,

    /* Value you received from the WeChat Pay SDK. */
    @SerialName(value = "resultCode") val resultCode: kotlin.String? = null,

    /* Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`. */
    @SerialName(value = "threeDSResult") val threeDSResult: kotlin.String? = null,

    /* Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`. */
    @SerialName(value = "threeds2.challengeResult") val threeds2ChallengeResult: kotlin.String? = null,

    /* Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`. */
    @SerialName(value = "threeds2.fingerprint") val threeds2Fingerprint: kotlin.String? = null

)

