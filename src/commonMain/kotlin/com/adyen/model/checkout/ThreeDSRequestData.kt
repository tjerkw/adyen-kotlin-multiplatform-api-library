/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param challengeWindowSize Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
 * @param dataOnly Flag for data only flow.
 * @param nativeThreeDS Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available.
 * @param threeDSVersion The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**
 */
@Serializable
data class ThreeDSRequestData (

    /* Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen */
    @SerialName(value = "challengeWindowSize") val challengeWindowSize: ThreeDSRequestData.ChallengeWindowSize? = null,

    /* Flag for data only flow. */
    @SerialName(value = "dataOnly") val dataOnly: ThreeDSRequestData.DataOnly? = null,

    /* Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available. */
    @SerialName(value = "nativeThreeDS") val nativeThreeDS: ThreeDSRequestData.NativeThreeDS? = null,

    /* The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0** */
    @SerialName(value = "threeDSVersion") val threeDSVersion: ThreeDSRequestData.ThreeDSVersion? = null

) {

    /**
     * Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
     *
     * Values: _01,_02,_03,_04,_05
     */
    @Serializable
    enum class ChallengeWindowSize(val value: kotlin.String) {
        @SerialName(value = "01") _01("01"),
        @SerialName(value = "02") _02("02"),
        @SerialName(value = "03") _03("03"),
        @SerialName(value = "04") _04("04"),
        @SerialName(value = "05") _05("05");
    }
    /**
     * Flag for data only flow.
     *
     * Values: False,True
     */
    @Serializable
    enum class DataOnly(val value: kotlin.String) {
        @SerialName(value = "false") False("false"),
        @SerialName(value = "true") True("true");
    }
    /**
     * Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available.
     *
     * Values: Preferred
     */
    @Serializable
    enum class NativeThreeDS(val value: kotlin.String) {
        @SerialName(value = "preferred") Preferred("preferred");
    }
    /**
     * The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**
     *
     * Values: _1Period0,_2Period0
     */
    @Serializable
    enum class ThreeDSVersion(val value: kotlin.String) {
        @SerialName(value = "2.1.0") _1Period0("2.1.0"),
        @SerialName(value = "2.2.0") _2Period0("2.2.0");
    }
}

