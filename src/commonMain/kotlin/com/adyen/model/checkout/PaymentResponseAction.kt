/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout

import com.adyen.model.checkout.Amount
import com.adyen.model.checkout.CheckoutAwaitAction
import com.adyen.model.checkout.CheckoutDelegatedAuthenticationAction
import com.adyen.model.checkout.CheckoutNativeRedirectAction
import com.adyen.model.checkout.CheckoutQrCodeAction
import com.adyen.model.checkout.CheckoutRedirectAction
import com.adyen.model.checkout.CheckoutSDKAction
import com.adyen.model.checkout.CheckoutThreeDS2Action
import com.adyen.model.checkout.CheckoutVoucherAction

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * Action to be taken for completing the payment.
 *
 * @param type **voucher**
 * @param paymentData Encoded payment data.
 * @param paymentMethodType Specifies the payment method.
 * @param url Specifies the URL to redirect to.
 * @param authorisationToken A token needed to authorise a payment.
 * @param token A token to pass to the 3DS2 Component to get the fingerprint.
 * @param `data` When the redirect URL must be accessed via POST, use this data to post to the redirect URL.
 * @param method Specifies the HTTP method, for example GET or POST.
 * @param nativeRedirectData Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.
 * @param expiresAt The date time of the voucher expiry.
 * @param qrCodeData The contents of the QR code as a UTF8 string.
 * @param sdkData The data to pass to the SDK.
 * @param subtype A subtype of the token.
 * @param alternativeReference The voucher alternative reference code.
 * @param collectionInstitutionNumber A collection institution number (store number) for Econtext Pay-Easy ATM.
 * @param downloadUrl The URL to download the voucher.
 * @param entity An entity number of Multibanco.
 * @param initialAmount 
 * @param instructionsUrl The URL to the detailed instructions to make payment using the voucher.
 * @param issuer The issuer of the voucher.
 * @param maskedTelephoneNumber The shopper telephone number (partially masked).
 * @param merchantName The merchant name.
 * @param merchantReference The merchant reference.
 * @param passCreationToken A base64 encoded signature of all properties
 * @param reference The voucher reference code.
 * @param shopperEmail The shopper email.
 * @param shopperName The shopper name.
 * @param surcharge 
 * @param totalAmount 
 */
@Serializable
data class PaymentResponseAction (

    /* **voucher** */
    @SerialName(value = "type") @Required val type: PaymentResponseAction.Type,

    /* Encoded payment data. */
    @SerialName(value = "paymentData") val paymentData: kotlin.String? = null,

    /* Specifies the payment method. */
    @SerialName(value = "paymentMethodType") val paymentMethodType: kotlin.String? = null,

    /* Specifies the URL to redirect to. */
    @SerialName(value = "url") val url: kotlin.String? = null,

    /* A token needed to authorise a payment. */
    @SerialName(value = "authorisationToken") val authorisationToken: kotlin.String? = null,

    /* A token to pass to the 3DS2 Component to get the fingerprint. */
    @SerialName(value = "token") val token: kotlin.String? = null,

    /* When the redirect URL must be accessed via POST, use this data to post to the redirect URL. */
    @SerialName(value = "data") val `data`: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* Specifies the HTTP method, for example GET or POST. */
    @SerialName(value = "method") val method: kotlin.String? = null,

    /* Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult. */
    @SerialName(value = "nativeRedirectData") val nativeRedirectData: kotlin.String? = null,

    /* The date time of the voucher expiry. */
    @SerialName(value = "expiresAt") val expiresAt: kotlin.String? = null,

    /* The contents of the QR code as a UTF8 string. */
    @SerialName(value = "qrCodeData") val qrCodeData: kotlin.String? = null,

    /* The data to pass to the SDK. */
    @SerialName(value = "sdkData") val sdkData: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* A subtype of the token. */
    @SerialName(value = "subtype") val subtype: kotlin.String? = null,

    /* The voucher alternative reference code. */
    @SerialName(value = "alternativeReference") val alternativeReference: kotlin.String? = null,

    /* A collection institution number (store number) for Econtext Pay-Easy ATM. */
    @SerialName(value = "collectionInstitutionNumber") val collectionInstitutionNumber: kotlin.String? = null,

    /* The URL to download the voucher. */
    @SerialName(value = "downloadUrl") val downloadUrl: kotlin.String? = null,

    /* An entity number of Multibanco. */
    @SerialName(value = "entity") val entity: kotlin.String? = null,

    @SerialName(value = "initialAmount") val initialAmount: Amount? = null,

    /* The URL to the detailed instructions to make payment using the voucher. */
    @SerialName(value = "instructionsUrl") val instructionsUrl: kotlin.String? = null,

    /* The issuer of the voucher. */
    @SerialName(value = "issuer") val issuer: kotlin.String? = null,

    /* The shopper telephone number (partially masked). */
    @SerialName(value = "maskedTelephoneNumber") val maskedTelephoneNumber: kotlin.String? = null,

    /* The merchant name. */
    @SerialName(value = "merchantName") val merchantName: kotlin.String? = null,

    /* The merchant reference. */
    @SerialName(value = "merchantReference") val merchantReference: kotlin.String? = null,

    /* A base64 encoded signature of all properties */
    @SerialName(value = "passCreationToken") val passCreationToken: kotlin.String? = null,

    /* The voucher reference code. */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /* The shopper email. */
    @SerialName(value = "shopperEmail") val shopperEmail: kotlin.String? = null,

    /* The shopper name. */
    @SerialName(value = "shopperName") val shopperName: kotlin.String? = null,

    @SerialName(value = "surcharge") val surcharge: Amount? = null,

    @SerialName(value = "totalAmount") val totalAmount: Amount? = null

) {

    /**
     * **voucher**
     *
     * Values: Voucher
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "voucher") Voucher("voucher");
    }
}

