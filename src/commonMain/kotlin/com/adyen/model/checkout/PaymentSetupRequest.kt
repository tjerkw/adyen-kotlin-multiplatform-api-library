/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout

import com.adyen.model.checkout.Address
import com.adyen.model.checkout.Amount
import com.adyen.model.checkout.ApplicationInfo
import com.adyen.model.checkout.Company
import com.adyen.model.checkout.Configuration
import com.adyen.model.checkout.ForexQuote
import com.adyen.model.checkout.Installments
import com.adyen.model.checkout.LineItem
import com.adyen.model.checkout.Mandate
import com.adyen.model.checkout.Name
import com.adyen.model.checkout.PlatformChargebackLogic
import com.adyen.model.checkout.RiskData
import com.adyen.model.checkout.Split

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount 
 * @param countryCode The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
 * @param merchantAccount The merchant account identifier, with which you want to process the transaction.
 * @param reference The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
 * @param returnUrl The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`
 * @param additionalAmount 
 * @param additionalData This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
 * @param allowedPaymentMethods List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @param applicationInfo 
 * @param billingAddress 
 * @param blockedPaymentMethods List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @param captureDelayHours The delay between the authorisation and scheduled auto-capture, specified in hours.
 * @param channel The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web
 * @param checkoutAttemptId Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
 * @param company 
 * @param configuration 
 * @param conversionId Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
 * @param dateOfBirth The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
 * @param dccQuote 
 * @param deliveryAddress 
 * @param deliveryDate The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
 * @param enableOneClick When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
 * @param enablePayOut When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
 * @param enableRecurring When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
 * @param entityType The type of the entity the payment is processed for.
 * @param fraudOffset An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @param installments 
 * @param lineItems Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.
 * @param localizedShopperStatement The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.
 * @param mandate 
 * @param mcc The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
 * @param merchantOrderReference This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
 * @param metadata Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 
 * @param orderReference When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
 * @param origin Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.
 * @param platformChargebackLogic 
 * @param recurringExpiry Date after which no further authorisations shall be performed. Only for 3D Secure 2.
 * @param recurringFrequency Minimum number of days between authorisations. Only for 3D Secure 2.
 * @param riskData 
 * @param sdkVersion The version of the SDK you are using (for Web SDK integrations only).
 * @param sessionValidity The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00
 * @param shopperEmail The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
 * @param shopperIP The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @param shopperInteraction Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @param shopperLocale The combination of a language code and a country code to specify the language to be used in the payment.
 * @param shopperName 
 * @param shopperReference Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @param shopperStatement The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
 * @param socialSecurityNumber The shopper's social security number.
 * @param splits An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
 * @param store The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms).
 * @param storePaymentMethod When true and `shopperReference` is provided, the payment details will be stored.
 * @param telephoneNumber The shopper's telephone number.
 * @param threeDSAuthenticationOnly If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
 * @param token The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web.
 * @param trustedShopper Set to true if the payment should be routed to a trusted MID.
 */
@Serializable
data class PaymentSetupRequest (

    @SerialName(value = "amount") @Required val amount: Amount,

    /* The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE */
    @SerialName(value = "countryCode") @Required val countryCode: kotlin.String,

    /* The merchant account identifier, with which you want to process the transaction. */
    @SerialName(value = "merchantAccount") @Required val merchantAccount: kotlin.String,

    /* The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters. */
    @SerialName(value = "reference") @Required val reference: kotlin.String,

    /* The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name` */
    @SerialName(value = "returnUrl") @Required val returnUrl: kotlin.String,

    @SerialName(value = "additionalAmount") val additionalAmount: Amount? = null,

    /* This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value. */
    @SerialName(value = "additionalData") val additionalData: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]` */
    @SerialName(value = "allowedPaymentMethods") val allowedPaymentMethods: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "applicationInfo") val applicationInfo: ApplicationInfo? = null,

    @SerialName(value = "billingAddress") val billingAddress: Address? = null,

    /* List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]` */
    @SerialName(value = "blockedPaymentMethods") val blockedPaymentMethods: kotlin.collections.List<kotlin.String>? = null,

    /* The delay between the authorisation and scheduled auto-capture, specified in hours. */
    @SerialName(value = "captureDelayHours") val captureDelayHours: kotlin.Int? = null,

    /* The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web */
    @SerialName(value = "channel") val channel: PaymentSetupRequest.Channel? = null,

    /* Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey. */
    @SerialName(value = "checkoutAttemptId") val checkoutAttemptId: kotlin.String? = null,

    @SerialName(value = "company") val company: Company? = null,

    @SerialName(value = "configuration") val configuration: Configuration? = null,

    /* Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "conversionId") val conversionId: kotlin.String? = null,

    /* The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD */
    @SerialName(value = "dateOfBirth") val dateOfBirth: kotlin.String? = null,

    @SerialName(value = "dccQuote") val dccQuote: ForexQuote? = null,

    @SerialName(value = "deliveryAddress") val deliveryAddress: Address? = null,

    /* The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00 */
    @SerialName(value = "deliveryDate") val deliveryDate: kotlin.String? = null,

    /* When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments. */
    @SerialName(value = "enableOneClick") val enableOneClick: kotlin.Boolean? = null,

    /* When true and `shopperReference` is provided, the payment details will be tokenized for payouts. */
    @SerialName(value = "enablePayOut") val enablePayOut: kotlin.Boolean? = null,

    /* When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments. */
    @SerialName(value = "enableRecurring") val enableRecurring: kotlin.Boolean? = null,

    /* The type of the entity the payment is processed for. */
    @SerialName(value = "entityType") val entityType: PaymentSetupRequest.EntityType? = null,

    /* An integer value that is added to the normal fraud score. The value can be either positive or negative. */
    @SerialName(value = "fraudOffset") val fraudOffset: kotlin.Int? = null,

    @SerialName(value = "installments") val installments: Installments? = null,

    /* Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip. */
    @SerialName(value = "lineItems") val lineItems: kotlin.collections.List<LineItem>? = null,

    /* The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters. */
    @SerialName(value = "localizedShopperStatement") val localizedShopperStatement: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    @SerialName(value = "mandate") val mandate: Mandate? = null,

    /* The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant. */
    @SerialName(value = "mcc") val mcc: kotlin.String? = null,

    /* This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`. */
    @SerialName(value = "merchantOrderReference") val merchantOrderReference: kotlin.String? = null,

    /* Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value.  */
    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead. */
    @SerialName(value = "orderReference") val orderReference: kotlin.String? = null,

    /* Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from. */
    @SerialName(value = "origin") val origin: kotlin.String? = null,

    @SerialName(value = "platformChargebackLogic") val platformChargebackLogic: PlatformChargebackLogic? = null,

    /* Date after which no further authorisations shall be performed. Only for 3D Secure 2. */
    @SerialName(value = "recurringExpiry") val recurringExpiry: kotlin.String? = null,

    /* Minimum number of days between authorisations. Only for 3D Secure 2. */
    @SerialName(value = "recurringFrequency") val recurringFrequency: kotlin.String? = null,

    @SerialName(value = "riskData") val riskData: RiskData? = null,

    /* The version of the SDK you are using (for Web SDK integrations only). */
    @SerialName(value = "sdkVersion") val sdkVersion: kotlin.String? = null,

    /* The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00 */
    @SerialName(value = "sessionValidity") val sessionValidity: kotlin.String? = null,

    /* The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations. */
    @SerialName(value = "shopperEmail") val shopperEmail: kotlin.String? = null,

    /* The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new). */
    @SerialName(value = "shopperIP") val shopperIP: kotlin.String? = null,

    /* Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal. */
    @SerialName(value = "shopperInteraction") val shopperInteraction: PaymentSetupRequest.ShopperInteraction? = null,

    /* The combination of a language code and a country code to specify the language to be used in the payment. */
    @SerialName(value = "shopperLocale") val shopperLocale: kotlin.String? = null,

    @SerialName(value = "shopperName") val shopperName: Name? = null,

    /* Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address. */
    @SerialName(value = "shopperReference") val shopperReference: kotlin.String? = null,

    /* The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**. */
    @SerialName(value = "shopperStatement") val shopperStatement: kotlin.String? = null,

    /* The shopper's social security number. */
    @SerialName(value = "socialSecurityNumber") val socialSecurityNumber: kotlin.String? = null,

    /* An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split). */
    @SerialName(value = "splits") val splits: kotlin.collections.List<Split>? = null,

    /* The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms). */
    @SerialName(value = "store") val store: kotlin.String? = null,

    /* When true and `shopperReference` is provided, the payment details will be stored. */
    @SerialName(value = "storePaymentMethod") val storePaymentMethod: kotlin.Boolean? = null,

    /* The shopper's telephone number. */
    @SerialName(value = "telephoneNumber") val telephoneNumber: kotlin.String? = null,

    /* If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "threeDSAuthenticationOnly") val threeDSAuthenticationOnly: kotlin.Boolean? = false,

    /* The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web. */
    @SerialName(value = "token") val token: kotlin.String? = null,

    /* Set to true if the payment should be routed to a trusted MID. */
    @SerialName(value = "trustedShopper") val trustedShopper: kotlin.Boolean? = null

) {

    /**
     * The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web
     *
     * Values: IOS,Android,Web
     */
    @Serializable
    enum class Channel(val value: kotlin.String) {
        @SerialName(value = "iOS") IOS("iOS"),
        @SerialName(value = "Android") Android("Android"),
        @SerialName(value = "Web") Web("Web");
    }
    /**
     * The type of the entity the payment is processed for.
     *
     * Values: NaturalPerson,CompanyName
     */
    @Serializable
    enum class EntityType(val value: kotlin.String) {
        @SerialName(value = "NaturalPerson") NaturalPerson("NaturalPerson"),
        @SerialName(value = "CompanyName") CompanyName("CompanyName");
    }
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     *
     * Values: Ecommerce,ContAuth,Moto,POS
     */
    @Serializable
    enum class ShopperInteraction(val value: kotlin.String) {
        @SerialName(value = "Ecommerce") Ecommerce("Ecommerce"),
        @SerialName(value = "ContAuth") ContAuth("ContAuth"),
        @SerialName(value = "Moto") Moto("Moto"),
        @SerialName(value = "POS") POS("POS");
    }
}

