/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param brand The brand of the card.
 * @param expiryMonth The month the card expires.
 * @param expiryYear The last two digits of the year the card expires. For example, **22** for the year 2022.
 * @param externalResponseCode The response code returned by an external system (for example after a provisioning operation).
 * @param externalTokenReference The token reference of a linked token in an external system (for example a network token reference).
 * @param holderName The unique payment method code.
 * @param iban The IBAN of the bank account.
 * @param id A unique identifier of this stored payment method.
 * @param issuerName The name of the issuer of token or card.
 * @param lastFour The last four digits of the PAN.
 * @param name The display name of the stored payment method.
 * @param networkTxReference Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
 * @param ownerName The name of the bank account holder.
 * @param shopperEmail The shopper’s email address.
 * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @param supportedRecurringProcessingModels Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
 * @param type The type of payment method.
 */
@Serializable
data class StoredPaymentMethodResource (

    /* The brand of the card. */
    @SerialName(value = "brand") val brand: kotlin.String? = null,

    /* The month the card expires. */
    @SerialName(value = "expiryMonth") val expiryMonth: kotlin.String? = null,

    /* The last two digits of the year the card expires. For example, **22** for the year 2022. */
    @SerialName(value = "expiryYear") val expiryYear: kotlin.String? = null,

    /* The response code returned by an external system (for example after a provisioning operation). */
    @SerialName(value = "externalResponseCode") val externalResponseCode: kotlin.String? = null,

    /* The token reference of a linked token in an external system (for example a network token reference). */
    @SerialName(value = "externalTokenReference") val externalTokenReference: kotlin.String? = null,

    /* The unique payment method code. */
    @SerialName(value = "holderName") val holderName: kotlin.String? = null,

    /* The IBAN of the bank account. */
    @SerialName(value = "iban") val iban: kotlin.String? = null,

    /* A unique identifier of this stored payment method. */
    @SerialName(value = "id") val id: kotlin.String? = null,

    /* The name of the issuer of token or card. */
    @SerialName(value = "issuerName") val issuerName: kotlin.String? = null,

    /* The last four digits of the PAN. */
    @SerialName(value = "lastFour") val lastFour: kotlin.String? = null,

    /* The display name of the stored payment method. */
    @SerialName(value = "name") val name: kotlin.String? = null,

    /* Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID. */
    @SerialName(value = "networkTxReference") val networkTxReference: kotlin.String? = null,

    /* The name of the bank account holder. */
    @SerialName(value = "ownerName") val ownerName: kotlin.String? = null,

    /* The shopper’s email address. */
    @SerialName(value = "shopperEmail") val shopperEmail: kotlin.String? = null,

    /* Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address. */
    @SerialName(value = "shopperReference") val shopperReference: kotlin.String? = null,

    /* Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. */
    @SerialName(value = "supportedRecurringProcessingModels") val supportedRecurringProcessingModels: kotlin.collections.List<kotlin.String>? = null,

    /* The type of payment method. */
    @SerialName(value = "type") val type: kotlin.String? = null

)

