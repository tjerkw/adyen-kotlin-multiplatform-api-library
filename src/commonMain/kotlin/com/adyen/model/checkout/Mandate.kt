/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount The billing amount (in minor units) of the recurring transactions.
 * @param endsAt End date of the billing plan, in YYYY-MM-DD format.
 * @param frequency The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
 * @param amountRule The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.  
 * @param billingAttemptsRule The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  
 * @param billingDay The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the `frequency`.
 * @param remarks The message shown by UPI to the shopper on the approval screen.
 * @param startsAt Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.
 */
@Serializable
data class Mandate (

    /* The billing amount (in minor units) of the recurring transactions. */
    @SerialName(value = "amount") @Required val amount: kotlin.String,

    /* End date of the billing plan, in YYYY-MM-DD format. */
    @SerialName(value = "endsAt") @Required val endsAt: kotlin.String,

    /* The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**. */
    @SerialName(value = "frequency") @Required val frequency: Mandate.Frequency,

    /* The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.   */
    @SerialName(value = "amountRule") val amountRule: Mandate.AmountRule? = null,

    /* The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.   */
    @SerialName(value = "billingAttemptsRule") val billingAttemptsRule: Mandate.BillingAttemptsRule? = null,

    /* The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the `frequency`. */
    @SerialName(value = "billingDay") val billingDay: kotlin.String? = null,

    /* The message shown by UPI to the shopper on the approval screen. */
    @SerialName(value = "remarks") val remarks: kotlin.String? = null,

    /* Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date. */
    @SerialName(value = "startsAt") val startsAt: kotlin.String? = null

) {

    /**
     * The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
     *
     * Values: Adhoc,Daily,Weekly,BiWeekly,Monthly,Quarterly,HalfYearly,Yearly
     */
    @Serializable
    enum class Frequency(val value: kotlin.String) {
        @SerialName(value = "adhoc") Adhoc("adhoc"),
        @SerialName(value = "daily") Daily("daily"),
        @SerialName(value = "weekly") Weekly("weekly"),
        @SerialName(value = "biWeekly") BiWeekly("biWeekly"),
        @SerialName(value = "monthly") Monthly("monthly"),
        @SerialName(value = "quarterly") Quarterly("quarterly"),
        @SerialName(value = "halfYearly") HalfYearly("halfYearly"),
        @SerialName(value = "yearly") Yearly("yearly");
    }
    /**
     * The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.  
     *
     * Values: Max,Exact
     */
    @Serializable
    enum class AmountRule(val value: kotlin.String) {
        @SerialName(value = "max") Max("max"),
        @SerialName(value = "exact") Exact("exact");
    }
    /**
     * The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  
     *
     * Values: On,Before,After
     */
    @Serializable
    enum class BillingAttemptsRule(val value: kotlin.String) {
        @SerialName(value = "on") On("on"),
        @SerialName(value = "before") Before("before"),
        @SerialName(value = "after") After("after");
    }
}

