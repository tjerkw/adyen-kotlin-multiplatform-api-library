/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param openinvoicedataMerchantData Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.  Since the field is optional, if it's not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string.
 * @param openinvoicedataNumberOfLines The number of invoice lines included in `openinvoicedata`.  There needs to be at least one line, so `numberOfLines` needs to be at least 1.
 * @param openinvoicedataRecipientFirstName First name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
 * @param openinvoicedataRecipientLastName Last name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna.
 * @param openinvoicedataLineItemNrCurrencyCode The three-character ISO currency code.
 * @param openinvoicedataLineItemNrDescription A text description of the product the invoice line refers to.
 * @param openinvoicedataLineItemNrItemAmount The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded.
 * @param openinvoicedataLineItemNrItemId A unique id for this item. Required for RatePay if the description of each item is not unique.
 * @param openinvoicedataLineItemNrItemVatAmount The VAT due for one item in the invoice line, represented in minor units.
 * @param openinvoicedataLineItemNrItemVatPercentage The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900.
 * @param openinvoicedataLineItemNrNumberOfItems The number of units purchased of a specific product.
 * @param openinvoicedataLineItemNrReturnShippingCompany Name of the shipping company handling the the return shipment.
 * @param openinvoicedataLineItemNrReturnTrackingNumber The tracking number for the return of the shipment.
 * @param openinvoicedataLineItemNrReturnTrackingUri URI where the customer can track the return of their shipment.
 * @param openinvoicedataLineItemNrShippingCompany Name of the shipping company handling the delivery.
 * @param openinvoicedataLineItemNrShippingMethod Shipping method.
 * @param openinvoicedataLineItemNrTrackingNumber The tracking number for the shipment.
 * @param openinvoicedataLineItemNrTrackingUri URI where the customer can track their shipment.
 */
@Serializable
data class AdditionalDataOpenInvoice (

    /* Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.  The `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.  Since the field is optional, if it's not included it does not impact computing the merchant signature.  Applies only to Klarna.  You can contact Klarna for the format and structure of the string. */
    @SerialName(value = "openinvoicedata.merchantData") val openinvoicedataMerchantData: kotlin.String? = null,

    /* The number of invoice lines included in `openinvoicedata`.  There needs to be at least one line, so `numberOfLines` needs to be at least 1. */
    @SerialName(value = "openinvoicedata.numberOfLines") val openinvoicedataNumberOfLines: kotlin.String? = null,

    /* First name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna. */
    @SerialName(value = "openinvoicedata.recipientFirstName") val openinvoicedataRecipientFirstName: kotlin.String? = null,

    /* Last name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna. */
    @SerialName(value = "openinvoicedata.recipientLastName") val openinvoicedataRecipientLastName: kotlin.String? = null,

    /* The three-character ISO currency code. */
    @SerialName(value = "openinvoicedataLine[itemNr].currencyCode") val openinvoicedataLineItemNrCurrencyCode: kotlin.String? = null,

    /* A text description of the product the invoice line refers to. */
    @SerialName(value = "openinvoicedataLine[itemNr].description") val openinvoicedataLineItemNrDescription: kotlin.String? = null,

    /* The price for one item in the invoice line, represented in minor units.  The due amount for the item, VAT excluded. */
    @SerialName(value = "openinvoicedataLine[itemNr].itemAmount") val openinvoicedataLineItemNrItemAmount: kotlin.String? = null,

    /* A unique id for this item. Required for RatePay if the description of each item is not unique. */
    @SerialName(value = "openinvoicedataLine[itemNr].itemId") val openinvoicedataLineItemNrItemId: kotlin.String? = null,

    /* The VAT due for one item in the invoice line, represented in minor units. */
    @SerialName(value = "openinvoicedataLine[itemNr].itemVatAmount") val openinvoicedataLineItemNrItemVatAmount: kotlin.String? = null,

    /* The VAT percentage for one item in the invoice line, represented in minor units.  For example, 19% VAT is specified as 1900. */
    @SerialName(value = "openinvoicedataLine[itemNr].itemVatPercentage") val openinvoicedataLineItemNrItemVatPercentage: kotlin.String? = null,

    /* The number of units purchased of a specific product. */
    @SerialName(value = "openinvoicedataLine[itemNr].numberOfItems") val openinvoicedataLineItemNrNumberOfItems: kotlin.String? = null,

    /* Name of the shipping company handling the the return shipment. */
    @SerialName(value = "openinvoicedataLine[itemNr].returnShippingCompany") val openinvoicedataLineItemNrReturnShippingCompany: kotlin.String? = null,

    /* The tracking number for the return of the shipment. */
    @SerialName(value = "openinvoicedataLine[itemNr].returnTrackingNumber") val openinvoicedataLineItemNrReturnTrackingNumber: kotlin.String? = null,

    /* URI where the customer can track the return of their shipment. */
    @SerialName(value = "openinvoicedataLine[itemNr].returnTrackingUri") val openinvoicedataLineItemNrReturnTrackingUri: kotlin.String? = null,

    /* Name of the shipping company handling the delivery. */
    @SerialName(value = "openinvoicedataLine[itemNr].shippingCompany") val openinvoicedataLineItemNrShippingCompany: kotlin.String? = null,

    /* Shipping method. */
    @SerialName(value = "openinvoicedataLine[itemNr].shippingMethod") val openinvoicedataLineItemNrShippingMethod: kotlin.String? = null,

    /* The tracking number for the shipment. */
    @SerialName(value = "openinvoicedataLine[itemNr].trackingNumber") val openinvoicedataLineItemNrTrackingNumber: kotlin.String? = null,

    /* URI where the customer can track their shipment. */
    @SerialName(value = "openinvoicedataLine[itemNr].trackingUri") val openinvoicedataLineItemNrTrackingUri: kotlin.String? = null

)

