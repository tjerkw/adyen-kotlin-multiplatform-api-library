/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout

import com.adyen.model.checkout.AccountInfo
import com.adyen.model.checkout.Amount
import com.adyen.model.checkout.ApplicationInfo
import com.adyen.model.checkout.AuthenticationData
import com.adyen.model.checkout.BillingAddress
import com.adyen.model.checkout.CheckoutSessionInstallmentOption
import com.adyen.model.checkout.Company
import com.adyen.model.checkout.DeliveryAddress
import com.adyen.model.checkout.FundOrigin
import com.adyen.model.checkout.FundRecipient
import com.adyen.model.checkout.LineItem
import com.adyen.model.checkout.Mandate
import com.adyen.model.checkout.Name
import com.adyen.model.checkout.PlatformChargebackLogic
import com.adyen.model.checkout.RiskData
import com.adyen.model.checkout.Split
import com.adyen.model.checkout.ThreeDSecureData

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount 
 * @param merchantAccount The merchant account identifier, with which you want to process the transaction.
 * @param reference The reference to uniquely identify a payment.
 * @param returnUrl The URL to return to when a redirect payment is completed.
 * @param accountInfo 
 * @param additionalAmount 
 * @param additionalData This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
 * @param allowedPaymentMethods List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @param applicationInfo 
 * @param authenticationData 
 * @param billingAddress 
 * @param blockedPaymentMethods List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @param captureDelayHours The delay between the authorisation and scheduled auto-capture, specified in hours.
 * @param channel The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**
 * @param company 
 * @param countryCode The shopper's two-letter country code.
 * @param dateOfBirth The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
 * @param deliverAt The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
 * @param deliveryAddress 
 * @param enableOneClick When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
 * @param enablePayOut When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
 * @param enableRecurring When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
 * @param expiresAt The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.
 * @param fundOrigin 
 * @param fundRecipient 
 * @param installmentOptions A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
 * @param lineItems Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.
 * @param mandate 
 * @param mcc The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
 * @param merchantOrderReference This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
 * @param metadata Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. 
 * @param mode Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration
 * @param mpiData 
 * @param platformChargebackLogic 
 * @param recurringExpiry Date after which no further authorisations shall be performed. Only for 3D Secure 2.
 * @param recurringFrequency Minimum number of days between authorisations. Only for 3D Secure 2.
 * @param recurringProcessingModel Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 
 * @param redirectFromIssuerMethod Specifies the redirect method (GET or POST) when redirecting back from the issuer.
 * @param redirectToIssuerMethod Specifies the redirect method (GET or POST) when redirecting to the issuer.
 * @param riskData 
 * @param shopperEmail The shopper's email address.
 * @param shopperIP The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @param shopperInteraction Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @param shopperLocale The combination of a language code and a country code to specify the language to be used in the payment.
 * @param shopperName 
 * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @param shopperStatement The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
 * @param showInstallmentAmount Set to true to show the payment amount per installment.
 * @param socialSecurityNumber The shopper's social security number.
 * @param splitCardFundingSources Boolean value indicating whether the card payment method should be split into separate debit and credit options.
 * @param splits An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
 * @param store The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms).
 * @param storePaymentMethod When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.
 * @param storePaymentMethodMode Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.
 * @param telephoneNumber The shopper's telephone number.
 * @param themeId Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform=Web&integration=Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area.
 * @param threeDSAuthenticationOnly If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
 * @param trustedShopper Set to true if the payment should be routed to a trusted MID.
 */
@Serializable
data class CreateCheckoutSessionRequest (

    @SerialName(value = "amount") @Required val amount: Amount,

    /* The merchant account identifier, with which you want to process the transaction. */
    @SerialName(value = "merchantAccount") @Required val merchantAccount: kotlin.String,

    /* The reference to uniquely identify a payment. */
    @SerialName(value = "reference") @Required val reference: kotlin.String,

    /* The URL to return to when a redirect payment is completed. */
    @SerialName(value = "returnUrl") @Required val returnUrl: kotlin.String,

    @SerialName(value = "accountInfo") val accountInfo: AccountInfo? = null,

    @SerialName(value = "additionalAmount") val additionalAmount: Amount? = null,

    /* This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value. */
    @SerialName(value = "additionalData") val additionalData: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]` */
    @SerialName(value = "allowedPaymentMethods") val allowedPaymentMethods: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "applicationInfo") val applicationInfo: ApplicationInfo? = null,

    @SerialName(value = "authenticationData") val authenticationData: AuthenticationData? = null,

    @SerialName(value = "billingAddress") val billingAddress: BillingAddress? = null,

    /* List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]` */
    @SerialName(value = "blockedPaymentMethods") val blockedPaymentMethods: kotlin.collections.List<kotlin.String>? = null,

    /* The delay between the authorisation and scheduled auto-capture, specified in hours. */
    @SerialName(value = "captureDelayHours") val captureDelayHours: kotlin.Int? = null,

    /* The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web** */
    @SerialName(value = "channel") val channel: CreateCheckoutSessionRequest.Channel? = null,

    @SerialName(value = "company") val company: Company? = null,

    /* The shopper's two-letter country code. */
    @SerialName(value = "countryCode") val countryCode: kotlin.String? = null,

    /* The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD */
    @SerialName(value = "dateOfBirth") val dateOfBirth: kotlin.String? = null,

    /* The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**. */
    @SerialName(value = "deliverAt") val deliverAt: kotlin.String? = null,

    @SerialName(value = "deliveryAddress") val deliveryAddress: DeliveryAddress? = null,

    /* When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments. */
    @SerialName(value = "enableOneClick") val enableOneClick: kotlin.Boolean? = null,

    /* When true and `shopperReference` is provided, the payment details will be tokenized for payouts. */
    @SerialName(value = "enablePayOut") val enablePayOut: kotlin.Boolean? = null,

    /* When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments. */
    @SerialName(value = "enableRecurring") val enableRecurring: kotlin.Boolean? = null,

    /* The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation. */
    @SerialName(value = "expiresAt") val expiresAt: kotlin.String? = null,

    @SerialName(value = "fundOrigin") val fundOrigin: FundOrigin? = null,

    @SerialName(value = "fundRecipient") val fundRecipient: FundRecipient? = null,

    /* A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options. */
    @SerialName(value = "installmentOptions") val installmentOptions: kotlin.collections.Map<kotlin.String, CheckoutSessionInstallmentOption>? = null,

    /* Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip. */
    @SerialName(value = "lineItems") val lineItems: kotlin.collections.List<LineItem>? = null,

    @SerialName(value = "mandate") val mandate: Mandate? = null,

    /* The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant. */
    @SerialName(value = "mcc") val mcc: kotlin.String? = null,

    /* This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`. */
    @SerialName(value = "merchantOrderReference") val merchantOrderReference: kotlin.String? = null,

    /* Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value.  */
    @SerialName(value = "metadata") val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration */
    @SerialName(value = "mode") val mode: CreateCheckoutSessionRequest.Mode? = Mode.Embedded,

    @SerialName(value = "mpiData") val mpiData: ThreeDSecureData? = null,

    @SerialName(value = "platformChargebackLogic") val platformChargebackLogic: PlatformChargebackLogic? = null,

    /* Date after which no further authorisations shall be performed. Only for 3D Secure 2. */
    @SerialName(value = "recurringExpiry") val recurringExpiry: kotlin.String? = null,

    /* Minimum number of days between authorisations. Only for 3D Secure 2. */
    @SerialName(value = "recurringFrequency") val recurringFrequency: kotlin.String? = null,

    /* Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.  */
    @SerialName(value = "recurringProcessingModel") val recurringProcessingModel: CreateCheckoutSessionRequest.RecurringProcessingModel? = null,

    /* Specifies the redirect method (GET or POST) when redirecting back from the issuer. */
    @SerialName(value = "redirectFromIssuerMethod") val redirectFromIssuerMethod: kotlin.String? = null,

    /* Specifies the redirect method (GET or POST) when redirecting to the issuer. */
    @SerialName(value = "redirectToIssuerMethod") val redirectToIssuerMethod: kotlin.String? = null,

    @SerialName(value = "riskData") val riskData: RiskData? = null,

    /* The shopper's email address. */
    @SerialName(value = "shopperEmail") val shopperEmail: kotlin.String? = null,

    /* The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new). */
    @SerialName(value = "shopperIP") val shopperIP: kotlin.String? = null,

    /* Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal. */
    @SerialName(value = "shopperInteraction") val shopperInteraction: CreateCheckoutSessionRequest.ShopperInteraction? = null,

    /* The combination of a language code and a country code to specify the language to be used in the payment. */
    @SerialName(value = "shopperLocale") val shopperLocale: kotlin.String? = null,

    @SerialName(value = "shopperName") val shopperName: Name? = null,

    /* Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address. */
    @SerialName(value = "shopperReference") val shopperReference: kotlin.String? = null,

    /* The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**. */
    @SerialName(value = "shopperStatement") val shopperStatement: kotlin.String? = null,

    /* Set to true to show the payment amount per installment. */
    @SerialName(value = "showInstallmentAmount") val showInstallmentAmount: kotlin.Boolean? = null,

    /* The shopper's social security number. */
    @SerialName(value = "socialSecurityNumber") val socialSecurityNumber: kotlin.String? = null,

    /* Boolean value indicating whether the card payment method should be split into separate debit and credit options. */
    @SerialName(value = "splitCardFundingSources") val splitCardFundingSources: kotlin.Boolean? = false,

    /* An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split). */
    @SerialName(value = "splits") val splits: kotlin.collections.List<Split>? = null,

    /* The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms). */
    @SerialName(value = "store") val store: kotlin.String? = null,

    /* When this is set to **true** and the `shopperReference` is provided, the payment details will be stored. */
    @SerialName(value = "storePaymentMethod") val storePaymentMethod: kotlin.Boolean? = null,

    /* Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent. */
    @SerialName(value = "storePaymentMethodMode") val storePaymentMethodMode: CreateCheckoutSessionRequest.StorePaymentMethodMode? = null,

    /* The shopper's telephone number. */
    @SerialName(value = "telephoneNumber") val telephoneNumber: kotlin.String? = null,

    /* Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform=Web&integration=Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area. */
    @SerialName(value = "themeId") val themeId: kotlin.String? = null,

    /* If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "threeDSAuthenticationOnly") val threeDSAuthenticationOnly: kotlin.Boolean? = false,

    /* Set to true if the payment should be routed to a trusted MID. */
    @SerialName(value = "trustedShopper") val trustedShopper: kotlin.Boolean? = null

) {

    /**
     * The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**
     *
     * Values: IOS,Android,Web
     */
    @Serializable
    enum class Channel(val value: kotlin.String) {
        @SerialName(value = "iOS") IOS("iOS"),
        @SerialName(value = "Android") Android("Android"),
        @SerialName(value = "Web") Web("Web");
    }
    /**
     * Indicates the type of front end integration. Possible values: * **embedded** (default): Drop-in or Components integration * **hosted**: Hosted Checkout integration
     *
     * Values: Embedded,Hosted
     */
    @Serializable
    enum class Mode(val value: kotlin.String) {
        @SerialName(value = "embedded") Embedded("embedded"),
        @SerialName(value = "hosted") Hosted("hosted");
    }
    /**
     * Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 
     *
     * Values: CardOnFile,Subscription,UnscheduledCardOnFile
     */
    @Serializable
    enum class RecurringProcessingModel(val value: kotlin.String) {
        @SerialName(value = "CardOnFile") CardOnFile("CardOnFile"),
        @SerialName(value = "Subscription") Subscription("Subscription"),
        @SerialName(value = "UnscheduledCardOnFile") UnscheduledCardOnFile("UnscheduledCardOnFile");
    }
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     *
     * Values: Ecommerce,ContAuth,Moto,POS
     */
    @Serializable
    enum class ShopperInteraction(val value: kotlin.String) {
        @SerialName(value = "Ecommerce") Ecommerce("Ecommerce"),
        @SerialName(value = "ContAuth") ContAuth("ContAuth"),
        @SerialName(value = "Moto") Moto("Moto"),
        @SerialName(value = "POS") POS("POS");
    }
    /**
     * Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.
     *
     * Values: AskForConsent,Disabled,Enabled
     */
    @Serializable
    enum class StorePaymentMethodMode(val value: kotlin.String) {
        @SerialName(value = "askForConsent") AskForConsent("askForConsent"),
        @SerialName(value = "disabled") Disabled("disabled"),
        @SerialName(value = "enabled") Enabled("enabled");
    }
}

