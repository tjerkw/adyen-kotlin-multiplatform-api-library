/**
 * Adyen Checkout API
 *
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v71/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v71/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=71) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 71
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.checkout


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param bankAccountNumber The bank account number (without separators).
 * @param bankAccountType The bank account type (checking, savings...).
 * @param bankLocationId The bank routing number of the account. The field value is `nil` in most cases.
 * @param checkoutAttemptId The checkout attempt identifier.
 * @param encryptedBankAccountNumber Encrypted bank account number. The bank account number (without separators).
 * @param encryptedBankLocationId Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.
 * @param ownerName The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
 * @param recurringDetailReference This is the `recurringDetailReference` returned in the response when you created the token.
 * @param storedPaymentMethodId This is the `recurringDetailReference` returned in the response when you created the token.
 * @param type **ach**
 */
@Serializable
data class AchDetails (

    /* The bank account number (without separators). */
    @SerialName(value = "bankAccountNumber") @Required val bankAccountNumber: kotlin.String,

    /* The bank account type (checking, savings...). */
    @SerialName(value = "bankAccountType") val bankAccountType: AchDetails.BankAccountType? = null,

    /* The bank routing number of the account. The field value is `nil` in most cases. */
    @SerialName(value = "bankLocationId") val bankLocationId: kotlin.String? = null,

    /* The checkout attempt identifier. */
    @SerialName(value = "checkoutAttemptId") val checkoutAttemptId: kotlin.String? = null,

    /* Encrypted bank account number. The bank account number (without separators). */
    @SerialName(value = "encryptedBankAccountNumber") val encryptedBankAccountNumber: kotlin.String? = null,

    /* Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases. */
    @SerialName(value = "encryptedBankLocationId") val encryptedBankLocationId: kotlin.String? = null,

    /* The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'. */
    @SerialName(value = "ownerName") val ownerName: kotlin.String? = null,

    /* This is the `recurringDetailReference` returned in the response when you created the token. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "recurringDetailReference") val recurringDetailReference: kotlin.String? = null,

    /* This is the `recurringDetailReference` returned in the response when you created the token. */
    @SerialName(value = "storedPaymentMethodId") val storedPaymentMethodId: kotlin.String? = null,

    /* **ach** */
    @SerialName(value = "type") val type: AchDetails.Type? = Type.Ach

) {

    /**
     * The bank account type (checking, savings...).
     *
     * Values: Balance,Checking,Deposit,General,Other,Payment,Savings
     */
    @Serializable
    enum class BankAccountType(val value: kotlin.String) {
        @SerialName(value = "balance") Balance("balance"),
        @SerialName(value = "checking") Checking("checking"),
        @SerialName(value = "deposit") Deposit("deposit"),
        @SerialName(value = "general") General("general"),
        @SerialName(value = "other") Other("other"),
        @SerialName(value = "payment") Payment("payment"),
        @SerialName(value = "savings") Savings("savings");
    }
    /**
     * **ach**
     *
     * Values: Ach,AchPlaid
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "ach") Ach("ach"),
        @SerialName(value = "ach_plaid") AchPlaid("ach_plaid");
    }
}

