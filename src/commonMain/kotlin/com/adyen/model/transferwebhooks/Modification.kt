/**
 * Transfer webhooks
 *
 * Adyen sends webhooks to inform your system about incoming and outgoing transfers in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transferwebhooks


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param direction The direction of the money movement.
 * @param id Our reference for the modification.
 * @param reference Your reference for the modification, used internally within your platform.
 * @param status The status of the transfer event.
 * @param type The type of transfer modification.
 */
@Serializable
data class Modification (

    /* The direction of the money movement. */
    @SerialName(value = "direction") val direction: kotlin.String? = null,

    /* Our reference for the modification. */
    @SerialName(value = "id") val id: kotlin.String? = null,

    /* Your reference for the modification, used internally within your platform. */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /* The status of the transfer event. */
    @SerialName(value = "status") val status: Modification.Status? = null,

    /* The type of transfer modification. */
    @SerialName(value = "type") val type: kotlin.String? = null

) {

    /**
     * The status of the transfer event.
     *
     * Values: ApprovalPending,AtmWithdrawal,AtmWithdrawalReversalPending,AtmWithdrawalReversed,AuthAdjustmentAuthorised,AuthAdjustmentError,AuthAdjustmentRefused,Authorised,BankTransfer,BankTransferPending,Booked,BookingPending,Cancelled,CapturePending,CaptureReversalPending,CaptureReversed,Captured,CapturedExternally,Chargeback,ChargebackExternally,ChargebackPending,ChargebackReversalPending,ChargebackReversed,Credited,DepositCorrection,DepositCorrectionPending,Dispute,DisputeClosed,DisputeExpired,DisputeNeedsReview,Error,Expired,Failed,Fee,FeePending,InternalTransfer,InternalTransferPending,InvoiceDeduction,InvoiceDeductionPending,ManualCorrectionPending,ManuallyCorrected,MatchedStatement,MatchedStatementPending,MerchantPayin,MerchantPayinPending,MerchantPayinReversed,MerchantPayinReversedPending,MiscCost,MiscCostPending,PaymentCost,PaymentCostPending,Received,RefundPending,RefundReversalPending,RefundReversed,Refunded,RefundedExternally,Refused,ReserveAdjustment,ReserveAdjustmentPending,Returned,SecondChargeback,SecondChargebackPending,Undefined
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "approvalPending") ApprovalPending("approvalPending"),
        @SerialName(value = "atmWithdrawal") AtmWithdrawal("atmWithdrawal"),
        @SerialName(value = "atmWithdrawalReversalPending") AtmWithdrawalReversalPending("atmWithdrawalReversalPending"),
        @SerialName(value = "atmWithdrawalReversed") AtmWithdrawalReversed("atmWithdrawalReversed"),
        @SerialName(value = "authAdjustmentAuthorised") AuthAdjustmentAuthorised("authAdjustmentAuthorised"),
        @SerialName(value = "authAdjustmentError") AuthAdjustmentError("authAdjustmentError"),
        @SerialName(value = "authAdjustmentRefused") AuthAdjustmentRefused("authAdjustmentRefused"),
        @SerialName(value = "authorised") Authorised("authorised"),
        @SerialName(value = "bankTransfer") BankTransfer("bankTransfer"),
        @SerialName(value = "bankTransferPending") BankTransferPending("bankTransferPending"),
        @SerialName(value = "booked") Booked("booked"),
        @SerialName(value = "bookingPending") BookingPending("bookingPending"),
        @SerialName(value = "cancelled") Cancelled("cancelled"),
        @SerialName(value = "capturePending") CapturePending("capturePending"),
        @SerialName(value = "captureReversalPending") CaptureReversalPending("captureReversalPending"),
        @SerialName(value = "captureReversed") CaptureReversed("captureReversed"),
        @SerialName(value = "captured") Captured("captured"),
        @SerialName(value = "capturedExternally") CapturedExternally("capturedExternally"),
        @SerialName(value = "chargeback") Chargeback("chargeback"),
        @SerialName(value = "chargebackExternally") ChargebackExternally("chargebackExternally"),
        @SerialName(value = "chargebackPending") ChargebackPending("chargebackPending"),
        @SerialName(value = "chargebackReversalPending") ChargebackReversalPending("chargebackReversalPending"),
        @SerialName(value = "chargebackReversed") ChargebackReversed("chargebackReversed"),
        @SerialName(value = "credited") Credited("credited"),
        @SerialName(value = "depositCorrection") DepositCorrection("depositCorrection"),
        @SerialName(value = "depositCorrectionPending") DepositCorrectionPending("depositCorrectionPending"),
        @SerialName(value = "dispute") Dispute("dispute"),
        @SerialName(value = "disputeClosed") DisputeClosed("disputeClosed"),
        @SerialName(value = "disputeExpired") DisputeExpired("disputeExpired"),
        @SerialName(value = "disputeNeedsReview") DisputeNeedsReview("disputeNeedsReview"),
        @SerialName(value = "error") Error("error"),
        @SerialName(value = "expired") Expired("expired"),
        @SerialName(value = "failed") Failed("failed"),
        @SerialName(value = "fee") Fee("fee"),
        @SerialName(value = "feePending") FeePending("feePending"),
        @SerialName(value = "internalTransfer") InternalTransfer("internalTransfer"),
        @SerialName(value = "internalTransferPending") InternalTransferPending("internalTransferPending"),
        @SerialName(value = "invoiceDeduction") InvoiceDeduction("invoiceDeduction"),
        @SerialName(value = "invoiceDeductionPending") InvoiceDeductionPending("invoiceDeductionPending"),
        @SerialName(value = "manualCorrectionPending") ManualCorrectionPending("manualCorrectionPending"),
        @SerialName(value = "manuallyCorrected") ManuallyCorrected("manuallyCorrected"),
        @SerialName(value = "matchedStatement") MatchedStatement("matchedStatement"),
        @SerialName(value = "matchedStatementPending") MatchedStatementPending("matchedStatementPending"),
        @SerialName(value = "merchantPayin") MerchantPayin("merchantPayin"),
        @SerialName(value = "merchantPayinPending") MerchantPayinPending("merchantPayinPending"),
        @SerialName(value = "merchantPayinReversed") MerchantPayinReversed("merchantPayinReversed"),
        @SerialName(value = "merchantPayinReversedPending") MerchantPayinReversedPending("merchantPayinReversedPending"),
        @SerialName(value = "miscCost") MiscCost("miscCost"),
        @SerialName(value = "miscCostPending") MiscCostPending("miscCostPending"),
        @SerialName(value = "paymentCost") PaymentCost("paymentCost"),
        @SerialName(value = "paymentCostPending") PaymentCostPending("paymentCostPending"),
        @SerialName(value = "received") Received("received"),
        @SerialName(value = "refundPending") RefundPending("refundPending"),
        @SerialName(value = "refundReversalPending") RefundReversalPending("refundReversalPending"),
        @SerialName(value = "refundReversed") RefundReversed("refundReversed"),
        @SerialName(value = "refunded") Refunded("refunded"),
        @SerialName(value = "refundedExternally") RefundedExternally("refundedExternally"),
        @SerialName(value = "refused") Refused("refused"),
        @SerialName(value = "reserveAdjustment") ReserveAdjustment("reserveAdjustment"),
        @SerialName(value = "reserveAdjustmentPending") ReserveAdjustmentPending("reserveAdjustmentPending"),
        @SerialName(value = "returned") Returned("returned"),
        @SerialName(value = "secondChargeback") SecondChargeback("secondChargeback"),
        @SerialName(value = "secondChargebackPending") SecondChargebackPending("secondChargebackPending"),
        @SerialName(value = "undefined") Undefined("undefined");
    }
}

