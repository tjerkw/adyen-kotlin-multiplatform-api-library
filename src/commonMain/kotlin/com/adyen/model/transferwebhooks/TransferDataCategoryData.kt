/**
 * Transfer webhooks
 *
 * Adyen sends webhooks to inform your system about incoming and outgoing transfers in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transferwebhooks

import com.adyen.model.transferwebhooks.BankCategoryData
import com.adyen.model.transferwebhooks.InternalCategoryData
import com.adyen.model.transferwebhooks.IssuedCard
import com.adyen.model.transferwebhooks.PlatformPayment
import com.adyen.model.transferwebhooks.RelayedAuthorisationData
import com.adyen.model.transferwebhooks.TransferNotificationValidationFact

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * The relevant data according to the transfer category.
 *
 * @param priority The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
 * @param type **platformPayment**
 * @param modificationMerchantReference The capture's merchant reference included in the transfer.
 * @param modificationPspReference The capture reference included in the transfer.
 * @param panEntryMode Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
 * @param processingType Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
 * @param relayedAuthorisationData 
 * @param validationFacts The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
 * @param paymentMerchantReference The payment's merchant reference included in the transfer.
 * @param platformPaymentType The type of the related split.
 * @param pspPaymentReference The payment reference included in the transfer.
 */
@Serializable
data class TransferDataCategoryData (

    /* The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN). */
    @SerialName(value = "priority") val priority: TransferDataCategoryData.Priority? = null,

    /* **platformPayment** */
    @SerialName(value = "type") val type: TransferDataCategoryData.Type? = Type.PlatformPayment,

    /* The capture's merchant reference included in the transfer. */
    @SerialName(value = "modificationMerchantReference") val modificationMerchantReference: kotlin.String? = null,

    /* The capture reference included in the transfer. */
    @SerialName(value = "modificationPspReference") val modificationPspReference: kotlin.String? = null,

    /* Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**. */
    @SerialName(value = "panEntryMode") val panEntryMode: TransferDataCategoryData.PanEntryMode? = null,

    /* Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments. */
    @SerialName(value = "processingType") val processingType: TransferDataCategoryData.ProcessingType? = null,

    @SerialName(value = "relayedAuthorisationData") val relayedAuthorisationData: RelayedAuthorisationData? = null,

    /* The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information. */
    @SerialName(value = "validationFacts") val validationFacts: kotlin.collections.List<TransferNotificationValidationFact>? = null,

    /* The payment's merchant reference included in the transfer. */
    @SerialName(value = "paymentMerchantReference") val paymentMerchantReference: kotlin.String? = null,

    /* The type of the related split. */
    @SerialName(value = "platformPaymentType") val platformPaymentType: TransferDataCategoryData.PlatformPaymentType? = null,

    /* The payment reference included in the transfer. */
    @SerialName(value = "pspPaymentReference") val pspPaymentReference: kotlin.String? = null

) {

    /**
     * The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
     *
     * Values: CrossBorder,Fast,Instant,Internal,Regular,Wire
     */
    @Serializable
    enum class Priority(val value: kotlin.String) {
        @SerialName(value = "crossBorder") CrossBorder("crossBorder"),
        @SerialName(value = "fast") Fast("fast"),
        @SerialName(value = "instant") Instant("instant"),
        @SerialName(value = "internal") Internal("internal"),
        @SerialName(value = "regular") Regular("regular"),
        @SerialName(value = "wire") Wire("wire");
    }
    /**
     * **platformPayment**
     *
     * Values: PlatformPayment
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "platformPayment") PlatformPayment("platformPayment");
    }
    /**
     * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
     *
     * Values: Chip,Cof,Contactless,Ecommerce,Magstripe,Manual,Token
     */
    @Serializable
    enum class PanEntryMode(val value: kotlin.String) {
        @SerialName(value = "chip") Chip("chip"),
        @SerialName(value = "cof") Cof("cof"),
        @SerialName(value = "contactless") Contactless("contactless"),
        @SerialName(value = "ecommerce") Ecommerce("ecommerce"),
        @SerialName(value = "magstripe") Magstripe("magstripe"),
        @SerialName(value = "manual") Manual("manual"),
        @SerialName(value = "token") Token("token");
    }
    /**
     * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
     *
     * Values: AtmWithdraw,BalanceInquiry,Ecommerce,Moto,Pos,PurchaseWithCashback,Recurring,Token
     */
    @Serializable
    enum class ProcessingType(val value: kotlin.String) {
        @SerialName(value = "atmWithdraw") AtmWithdraw("atmWithdraw"),
        @SerialName(value = "balanceInquiry") BalanceInquiry("balanceInquiry"),
        @SerialName(value = "ecommerce") Ecommerce("ecommerce"),
        @SerialName(value = "moto") Moto("moto"),
        @SerialName(value = "pos") Pos("pos"),
        @SerialName(value = "purchaseWithCashback") PurchaseWithCashback("purchaseWithCashback"),
        @SerialName(value = "recurring") Recurring("recurring"),
        @SerialName(value = "token") Token("token");
    }
    /**
     * The type of the related split.
     *
     * Values: AcquiringFees,AdyenCommission,AdyenFees,AdyenMarkup,BalanceAccount,Commission,Default,Interchange,PaymentFee,Remainder,SchemeFee,TopUp,VAT
     */
    @Serializable
    enum class PlatformPaymentType(val value: kotlin.String) {
        @SerialName(value = "AcquiringFees") AcquiringFees("AcquiringFees"),
        @SerialName(value = "AdyenCommission") AdyenCommission("AdyenCommission"),
        @SerialName(value = "AdyenFees") AdyenFees("AdyenFees"),
        @SerialName(value = "AdyenMarkup") AdyenMarkup("AdyenMarkup"),
        @SerialName(value = "BalanceAccount") BalanceAccount("BalanceAccount"),
        @SerialName(value = "Commission") Commission("Commission"),
        @SerialName(value = "Default") Default("Default"),
        @SerialName(value = "Interchange") Interchange("Interchange"),
        @SerialName(value = "PaymentFee") PaymentFee("PaymentFee"),
        @SerialName(value = "Remainder") Remainder("Remainder"),
        @SerialName(value = "SchemeFee") SchemeFee("SchemeFee"),
        @SerialName(value = "TopUp") TopUp("TopUp"),
        @SerialName(value = "VAT") VAT("VAT");
    }
}

