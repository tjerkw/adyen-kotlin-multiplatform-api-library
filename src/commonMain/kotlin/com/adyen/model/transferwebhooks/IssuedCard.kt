/**
 * Transfer webhooks
 *
 * Adyen sends webhooks to inform your system about incoming and outgoing transfers in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transferwebhooks

import com.adyen.model.transferwebhooks.RelayedAuthorisationData
import com.adyen.model.transferwebhooks.TransferNotificationValidationFact

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param panEntryMode Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
 * @param processingType Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
 * @param relayedAuthorisationData 
 * @param type **issuedCard**
 * @param validationFacts The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
 */
@Serializable
data class IssuedCard (

    /* Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**. */
    @SerialName(value = "panEntryMode") val panEntryMode: IssuedCard.PanEntryMode? = null,

    /* Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments. */
    @SerialName(value = "processingType") val processingType: IssuedCard.ProcessingType? = null,

    @SerialName(value = "relayedAuthorisationData") val relayedAuthorisationData: RelayedAuthorisationData? = null,

    /* **issuedCard** */
    @SerialName(value = "type") val type: IssuedCard.Type? = Type.IssuedCard,

    /* The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information. */
    @SerialName(value = "validationFacts") val validationFacts: kotlin.collections.List<TransferNotificationValidationFact>? = null

) {

    /**
     * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
     *
     * Values: Chip,Cof,Contactless,Ecommerce,Magstripe,Manual,Token
     */
    @Serializable
    enum class PanEntryMode(val value: kotlin.String) {
        @SerialName(value = "chip") Chip("chip"),
        @SerialName(value = "cof") Cof("cof"),
        @SerialName(value = "contactless") Contactless("contactless"),
        @SerialName(value = "ecommerce") Ecommerce("ecommerce"),
        @SerialName(value = "magstripe") Magstripe("magstripe"),
        @SerialName(value = "manual") Manual("manual"),
        @SerialName(value = "token") Token("token");
    }
    /**
     * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
     *
     * Values: AtmWithdraw,BalanceInquiry,Ecommerce,Moto,Pos,PurchaseWithCashback,Recurring,Token
     */
    @Serializable
    enum class ProcessingType(val value: kotlin.String) {
        @SerialName(value = "atmWithdraw") AtmWithdraw("atmWithdraw"),
        @SerialName(value = "balanceInquiry") BalanceInquiry("balanceInquiry"),
        @SerialName(value = "ecommerce") Ecommerce("ecommerce"),
        @SerialName(value = "moto") Moto("moto"),
        @SerialName(value = "pos") Pos("pos"),
        @SerialName(value = "purchaseWithCashback") PurchaseWithCashback("purchaseWithCashback"),
        @SerialName(value = "recurring") Recurring("recurring"),
        @SerialName(value = "token") Token("token");
    }
    /**
     * **issuedCard**
     *
     * Values: IssuedCard
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "issuedCard") IssuedCard("issuedCard");
    }
}

