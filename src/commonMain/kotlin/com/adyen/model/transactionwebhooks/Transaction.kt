/**
 * Transaction webhooks
 *
 * Adyen sends webhooks to inform your system about incoming and outgoing transfers in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.transactionwebhooks

import com.adyen.model.transactionwebhooks.Amount
import com.adyen.model.transactionwebhooks.ResourceReference
import com.adyen.model.transactionwebhooks.TransferData

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param accountHolder 
 * @param amount 
 * @param balanceAccount 
 * @param balancePlatform The unique identifier of the balance platform.
 * @param bookingDate The date the transaction was booked into the balance account.
 * @param id The unique identifier of the transaction.
 * @param status The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
 * @param valueDate The date the transfer amount becomes available in the balance account.
 * @param creationDate The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @param transfer 
 */
@Serializable
data class Transaction (

    @SerialName(value = "accountHolder") @Required val accountHolder: ResourceReference,

    @SerialName(value = "amount") @Required val amount: Amount,

    @SerialName(value = "balanceAccount") @Required val balanceAccount: ResourceReference,

    /* The unique identifier of the balance platform. */
    @SerialName(value = "balancePlatform") @Required val balancePlatform: kotlin.String,

    /* The date the transaction was booked into the balance account. */
    @SerialName(value = "bookingDate") @Required val bookingDate: kotlin.String,

    /* The unique identifier of the transaction. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.   */
    @SerialName(value = "status") @Required val status: Transaction.Status,

    /* The date the transfer amount becomes available in the balance account. */
    @SerialName(value = "valueDate") @Required val valueDate: kotlin.String,

    /* The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**. */
    @SerialName(value = "creationDate") val creationDate: kotlin.String? = null,

    @SerialName(value = "transfer") val transfer: TransferData? = null

) {

    /**
     * The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
     *
     * Values: Booked,Pending
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "booked") Booked("booked"),
        @SerialName(value = "pending") Pending("pending");
    }
}

