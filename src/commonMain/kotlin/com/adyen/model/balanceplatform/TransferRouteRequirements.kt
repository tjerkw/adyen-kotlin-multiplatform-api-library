/**
 * Configuration API
 *
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.balanceplatform

import com.adyen.model.balanceplatform.AddressRequirement
import com.adyen.model.balanceplatform.AmountMinMaxRequirement
import com.adyen.model.balanceplatform.BankAccountIdentificationTypeRequirement
import com.adyen.model.balanceplatform.PaymentInstrumentRequirement

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * A set of rules defined by clearing houses and banking partners. Your transfer request must adhere to these rules to ensure successful initiation of transfer. Based on the priority, one or more requirements may be returned. Each requirement is defined with a `type` and `description`.
 *
 * @param type **paymentInstrumentRequirement**
 * @param description Specifies the requirements for the payment instrument that need to be included in the request for a particular route.
 * @param requiredAddressFields List of address fields.
 * @param max Maximum amount.
 * @param min Minimum amount.
 * @param bankAccountIdentificationTypes List of bank account identification types: eg.; [iban , numberAndBic]
 * @param issuingCountryCode The two-character ISO-3166-1 alpha-2 country code of the counterparty. For example, **US** or **NL**.
 * @param onlyForCrossBalancePlatform Specifies if the requirement only applies to transfers to another balance platform.
 * @param paymentInstrumentType The type of the payment instrument. For example, \"BankAccount\" or \"Card\".
 */
@Serializable
data class TransferRouteRequirements (

    /* **paymentInstrumentRequirement** */
    @SerialName(value = "type") @Required val type: TransferRouteRequirements.Type = Type.PaymentInstrumentRequirement,

    /* Specifies the requirements for the payment instrument that need to be included in the request for a particular route. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* List of address fields. */
    @SerialName(value = "requiredAddressFields") val requiredAddressFields: kotlin.collections.List<TransferRouteRequirements.RequiredAddressFields>? = null,

    /* Maximum amount. */
    @SerialName(value = "max") val max: kotlin.Long? = null,

    /* Minimum amount. */
    @SerialName(value = "min") val min: kotlin.Long? = null,

    /* List of bank account identification types: eg.; [iban , numberAndBic] */
    @SerialName(value = "bankAccountIdentificationTypes") val bankAccountIdentificationTypes: kotlin.collections.List<TransferRouteRequirements.BankAccountIdentificationTypes>? = null,

    /* The two-character ISO-3166-1 alpha-2 country code of the counterparty. For example, **US** or **NL**. */
    @SerialName(value = "issuingCountryCode") val issuingCountryCode: kotlin.String? = null,

    /* Specifies if the requirement only applies to transfers to another balance platform. */
    @SerialName(value = "onlyForCrossBalancePlatform") val onlyForCrossBalancePlatform: kotlin.Boolean? = null,

    /* The type of the payment instrument. For example, \"BankAccount\" or \"Card\". */
    @SerialName(value = "paymentInstrumentType") val paymentInstrumentType: TransferRouteRequirements.PaymentInstrumentType? = null

) {

    /**
     * **paymentInstrumentRequirement**
     *
     * Values: PaymentInstrumentRequirement
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "paymentInstrumentRequirement") PaymentInstrumentRequirement("paymentInstrumentRequirement");
    }
    /**
     * List of address fields.
     *
     * Values: City,Country,Line1,PostalCode,StateOrProvince
     */
    @Serializable
    enum class RequiredAddressFields(val value: kotlin.String) {
        @SerialName(value = "city") City("city"),
        @SerialName(value = "country") Country("country"),
        @SerialName(value = "line1") Line1("line1"),
        @SerialName(value = "postalCode") PostalCode("postalCode"),
        @SerialName(value = "stateOrProvince") StateOrProvince("stateOrProvince");
    }
    /**
     * List of bank account identification types: eg.; [iban , numberAndBic]
     *
     * Values: AuLocal,BrLocal,CaLocal,CzLocal,DkLocal,HkLocal,HuLocal,Iban,Legacy,NoLocal,NumberAndBic,NzLocal,PlLocal,SeLocal,SgLocal,UkLocal,UsLocal
     */
    @Serializable
    enum class BankAccountIdentificationTypes(val value: kotlin.String) {
        @SerialName(value = "auLocal") AuLocal("auLocal"),
        @SerialName(value = "brLocal") BrLocal("brLocal"),
        @SerialName(value = "caLocal") CaLocal("caLocal"),
        @SerialName(value = "czLocal") CzLocal("czLocal"),
        @SerialName(value = "dkLocal") DkLocal("dkLocal"),
        @SerialName(value = "hkLocal") HkLocal("hkLocal"),
        @SerialName(value = "huLocal") HuLocal("huLocal"),
        @SerialName(value = "iban") Iban("iban"),
        @SerialName(value = "legacy") Legacy("legacy"),
        @SerialName(value = "noLocal") NoLocal("noLocal"),
        @SerialName(value = "numberAndBic") NumberAndBic("numberAndBic"),
        @SerialName(value = "nzLocal") NzLocal("nzLocal"),
        @SerialName(value = "plLocal") PlLocal("plLocal"),
        @SerialName(value = "seLocal") SeLocal("seLocal"),
        @SerialName(value = "sgLocal") SgLocal("sgLocal"),
        @SerialName(value = "ukLocal") UkLocal("ukLocal"),
        @SerialName(value = "usLocal") UsLocal("usLocal");
    }
    /**
     * The type of the payment instrument. For example, \"BankAccount\" or \"Card\".
     *
     * Values: BankAccount,Card
     */
    @Serializable
    enum class PaymentInstrumentType(val value: kotlin.String) {
        @SerialName(value = "BankAccount") BankAccount("BankAccount"),
        @SerialName(value = "Card") Card("Card");
    }
}

