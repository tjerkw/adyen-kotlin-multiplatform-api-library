/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.management

import com.adyen.model.management.AdditionalSettings

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param active Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
 * @param communicationFormat Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 
 * @param filterMerchantAccountType Shows how merchant accounts are filtered when configuring the webhook.   Possible values: *  **allAccounts** : Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`. *  **includeAccounts** : The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`. *  **excludeAccounts** : The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.  
 * @param filterMerchantAccounts A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.  Required if `filterMerchantAccountType` is either: * **includeAccounts** * **excludeAccounts**  Not needed for `filterMerchantAccountType`: **allAccounts**.
 * @param type The type of webhook that is being created. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **rreq-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
 * @param url Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
 * @param acceptsExpiredCertificate Indicates if expired SSL certificates are accepted. Default value: **false**.
 * @param acceptsSelfSignedCertificate Indicates if self-signed SSL certificates are accepted. Default value: **false**.
 * @param acceptsUntrustedRootCertificate Indicates if untrusted SSL certificates are accepted. Default value: **false**.
 * @param additionalSettings 
 * @param description Your description for this webhook configuration.
 * @param encryptionProtocol SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
 * @param networkType Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**.
 * @param password Password to access the webhook URL.
 * @param populateSoapActionHeader Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.
 * @param username Username to access the webhook URL.
 */
@Serializable
data class CreateCompanyWebhookRequest (

    /* Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account. */
    @SerialName(value = "active") @Required val active: kotlin.Boolean,

    /* Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json**  */
    @SerialName(value = "communicationFormat") @Required val communicationFormat: CreateCompanyWebhookRequest.CommunicationFormat,

    /* Shows how merchant accounts are filtered when configuring the webhook.   Possible values: *  **allAccounts** : Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`. *  **includeAccounts** : The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`. *  **excludeAccounts** : The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.   */
    @SerialName(value = "filterMerchantAccountType") @Required val filterMerchantAccountType: CreateCompanyWebhookRequest.FilterMerchantAccountType,

    /* A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.  Required if `filterMerchantAccountType` is either: * **includeAccounts** * **excludeAccounts**  Not needed for `filterMerchantAccountType`: **allAccounts**. */
    @SerialName(value = "filterMerchantAccounts") @Required val filterMerchantAccounts: kotlin.collections.List<kotlin.String>,

    /* The type of webhook that is being created. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **rreq-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications). */
    @SerialName(value = "type") @Required val type: kotlin.String,

    /* Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**. */
    @SerialName(value = "url") @Required val url: kotlin.String,

    /* Indicates if expired SSL certificates are accepted. Default value: **false**. */
    @SerialName(value = "acceptsExpiredCertificate") val acceptsExpiredCertificate: kotlin.Boolean? = null,

    /* Indicates if self-signed SSL certificates are accepted. Default value: **false**. */
    @SerialName(value = "acceptsSelfSignedCertificate") val acceptsSelfSignedCertificate: kotlin.Boolean? = null,

    /* Indicates if untrusted SSL certificates are accepted. Default value: **false**. */
    @SerialName(value = "acceptsUntrustedRootCertificate") val acceptsUntrustedRootCertificate: kotlin.Boolean? = null,

    @SerialName(value = "additionalSettings") val additionalSettings: AdditionalSettings? = null,

    /* Your description for this webhook configuration. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**. */
    @SerialName(value = "encryptionProtocol") val encryptionProtocol: CreateCompanyWebhookRequest.EncryptionProtocol? = null,

    /* Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**. */
    @SerialName(value = "networkType") val networkType: CreateCompanyWebhookRequest.NetworkType? = null,

    /* Password to access the webhook URL. */
    @SerialName(value = "password") val password: kotlin.String? = null,

    /* Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**. */
    @SerialName(value = "populateSoapActionHeader") val populateSoapActionHeader: kotlin.Boolean? = null,

    /* Username to access the webhook URL. */
    @SerialName(value = "username") val username: kotlin.String? = null

) {

    /**
     * Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 
     *
     * Values: Http,Json,Soap
     */
    @Serializable
    enum class CommunicationFormat(val value: kotlin.String) {
        @SerialName(value = "http") Http("http"),
        @SerialName(value = "json") Json("json"),
        @SerialName(value = "soap") Soap("soap");
    }
    /**
     * Shows how merchant accounts are filtered when configuring the webhook.   Possible values: *  **allAccounts** : Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`. *  **includeAccounts** : The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`. *  **excludeAccounts** : The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.  
     *
     * Values: AllAccounts,ExcludeAccounts,IncludeAccounts
     */
    @Serializable
    enum class FilterMerchantAccountType(val value: kotlin.String) {
        @SerialName(value = "allAccounts") AllAccounts("allAccounts"),
        @SerialName(value = "excludeAccounts") ExcludeAccounts("excludeAccounts"),
        @SerialName(value = "includeAccounts") IncludeAccounts("includeAccounts");
    }
    /**
     * SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     *
     * Values: HTTP,TLSv1Period2,TLSv1Period3
     */
    @Serializable
    enum class EncryptionProtocol(val value: kotlin.String) {
        @SerialName(value = "HTTP") HTTP("HTTP"),
        @SerialName(value = "TLSv1.2") TLSv1Period2("TLSv1.2"),
        @SerialName(value = "TLSv1.3") TLSv1Period3("TLSv1.3");
    }
    /**
     * Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**.
     *
     * Values: Local,Public
     */
    @Serializable
    enum class NetworkType(val value: kotlin.String) {
        @SerialName(value = "local") Local("local"),
        @SerialName(value = "public") Public("public");
    }
}

