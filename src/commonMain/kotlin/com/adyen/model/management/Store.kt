/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.management

import com.adyen.model.management.Links
import com.adyen.model.management.StoreLocation
import com.adyen.model.management.StoreSplitConfiguration

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param links 
 * @param address 
 * @param businessLineIds The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.
 * @param description The description of the store.
 * @param externalReferenceId When using the Zip payment method: The location ID that Zip has assigned to your store.
 * @param id The unique identifier of the store. This value is generated by Adyen.
 * @param merchantId The unique identifier of the merchant account that the store belongs to.
 * @param phoneNumber The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 
 * @param reference A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)
 * @param shopperStatement The store name shown on the shopper's bank or credit card statement and on the shopper receipt.
 * @param splitConfiguration 
 * @param status The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
 */
@Serializable
data class Store (

    @SerialName(value = "_links") val links: Links? = null,

    @SerialName(value = "address") val address: StoreLocation? = null,

    /* The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account. */
    @SerialName(value = "businessLineIds") val businessLineIds: kotlin.collections.List<kotlin.String>? = null,

    /* The description of the store. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* When using the Zip payment method: The location ID that Zip has assigned to your store. */
    @SerialName(value = "externalReferenceId") val externalReferenceId: kotlin.String? = null,

    /* The unique identifier of the store. This value is generated by Adyen. */
    @SerialName(value = "id") val id: kotlin.String? = null,

    /* The unique identifier of the merchant account that the store belongs to. */
    @SerialName(value = "merchantId") val merchantId: kotlin.String? = null,

    /* The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164.  */
    @SerialName(value = "phoneNumber") val phoneNumber: kotlin.String? = null,

    /* A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_) */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /* The store name shown on the shopper's bank or credit card statement and on the shopper receipt. */
    @SerialName(value = "shopperStatement") val shopperStatement: kotlin.String? = null,

    @SerialName(value = "splitConfiguration") val splitConfiguration: StoreSplitConfiguration? = null,

    /* The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory. */
    @SerialName(value = "status") val status: Store.Status? = null

) {

    /**
     * The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.
     *
     * Values: Active,Closed,Inactive
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "active") Active("active"),
        @SerialName(value = "closed") Closed("closed"),
        @SerialName(value = "inactive") Inactive("inactive");
    }
}

