/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.management


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param authType The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.
 * @param bssType Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.
 * @param ssid The name of the wireless network.
 * @param wsec The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**
 * @param autoWifi Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.
 * @param channel The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.
 * @param defaultProfile Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.
 * @param eap For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**
 * @param eapCaCert 
 * @param eapClientCert 
 * @param eapClientKey 
 * @param eapClientPwd For `eap` **tls**. The password of the RSA key file, if that file is password-protected.
 * @param eapIdentity For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.
 * @param eapIntermediateCert 
 * @param eapPwd For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.
 * @param hiddenSsid Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.
 * @param name Your name for the Wi-Fi profile.
 * @param psk For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.
 */
@Serializable
data class Profile (

    /* The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**. */
    @SerialName(value = "authType") @Required val authType: kotlin.String,

    /* Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations. */
    @SerialName(value = "bssType") @Required val bssType: kotlin.String,

    /* The name of the wireless network. */
    @SerialName(value = "ssid") @Required val ssid: kotlin.String,

    /* The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip** */
    @SerialName(value = "wsec") @Required val wsec: kotlin.String,

    /* Indicates whether to automatically select the best authentication method available. Does not work on older terminal models. */
    @SerialName(value = "autoWifi") val autoWifi: kotlin.Boolean? = null,

    /* The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection. */
    @SerialName(value = "channel") val channel: kotlin.Int? = null,

    /* Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first. */
    @SerialName(value = "defaultProfile") val defaultProfile: kotlin.Boolean? = null,

    /* For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast** */
    @SerialName(value = "eap") val eap: kotlin.String? = null,

    @SerialName(value = "eapCaCert") val eapCaCert: com.adyen.client.infrastructure.OctetByteArray? = null,

    @SerialName(value = "eapClientCert") val eapClientCert: com.adyen.client.infrastructure.OctetByteArray? = null,

    @SerialName(value = "eapClientKey") val eapClientKey: com.adyen.client.infrastructure.OctetByteArray? = null,

    /* For `eap` **tls**. The password of the RSA key file, if that file is password-protected. */
    @SerialName(value = "eapClientPwd") val eapClientPwd: kotlin.String? = null,

    /* For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server. */
    @SerialName(value = "eapIdentity") val eapIdentity: kotlin.String? = null,

    @SerialName(value = "eapIntermediateCert") val eapIntermediateCert: com.adyen.client.infrastructure.OctetByteArray? = null,

    /* For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server. */
    @SerialName(value = "eapPwd") val eapPwd: kotlin.String? = null,

    /* Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network. */
    @SerialName(value = "hiddenSsid") val hiddenSsid: kotlin.Boolean? = null,

    /* Your name for the Wi-Fi profile. */
    @SerialName(value = "name") val name: kotlin.String? = null,

    /* For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network. */
    @SerialName(value = "psk") val psk: kotlin.String? = null

)

