/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.management

import com.adyen.model.management.AfterpayTouchInfo
import com.adyen.model.management.ApplePayInfo
import com.adyen.model.management.BcmcInfo
import com.adyen.model.management.CartesBancairesInfo
import com.adyen.model.management.ClearpayInfo
import com.adyen.model.management.GenericPmWithTdiInfo
import com.adyen.model.management.GiroPayInfo
import com.adyen.model.management.GooglePayInfo
import com.adyen.model.management.KlarnaInfo
import com.adyen.model.management.MealVoucherFRInfo
import com.adyen.model.management.PayPalInfo
import com.adyen.model.management.SofortInfo
import com.adyen.model.management.SwishInfo
import com.adyen.model.management.TwintInfo
import com.adyen.model.management.VippsInfo

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param type Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
 * @param afterpayTouch 
 * @param applePay 
 * @param bcmc 
 * @param businessLineId The unique identifier of the business line.
 * @param cartesBancaires 
 * @param clearpay 
 * @param countries The list of countries where a payment method is available. By default, all countries supported by the payment method.
 * @param cup 
 * @param currencies The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
 * @param customRoutingFlags The list of custom routing flags to route payment to the intended acquirer.
 * @param diners 
 * @param discover 
 * @param eftposAustralia 
 * @param giroPay 
 * @param girocard 
 * @param googlePay 
 * @param ideal 
 * @param interacCard 
 * @param jcb 
 * @param klarna 
 * @param maestro 
 * @param mc 
 * @param mealVoucherFR 
 * @param paypal 
 * @param reference Your reference for the payment method. Supported characters a-z, A-Z, 0-9.
 * @param shopperInteraction The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
 * @param sofort 
 * @param storeIds The unique identifier of the store for which to configure the payment method, if any.
 * @param swish 
 * @param twint 
 * @param vipps 
 * @param visa 
 */
@Serializable
data class PaymentMethodSetupInfo (

    /* Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api). */
    @SerialName(value = "type") @Required val type: PaymentMethodSetupInfo.Type,

    @SerialName(value = "afterpayTouch") val afterpayTouch: AfterpayTouchInfo? = null,

    @SerialName(value = "applePay") val applePay: ApplePayInfo? = null,

    @SerialName(value = "bcmc") val bcmc: BcmcInfo? = null,

    /* The unique identifier of the business line. */
    @SerialName(value = "businessLineId") val businessLineId: kotlin.String? = null,

    @SerialName(value = "cartesBancaires") val cartesBancaires: CartesBancairesInfo? = null,

    @SerialName(value = "clearpay") val clearpay: ClearpayInfo? = null,

    /* The list of countries where a payment method is available. By default, all countries supported by the payment method. */
    @SerialName(value = "countries") val countries: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "cup") val cup: GenericPmWithTdiInfo? = null,

    /* The list of currencies that a payment method supports. By default, all currencies supported by the payment method. */
    @SerialName(value = "currencies") val currencies: kotlin.collections.List<kotlin.String>? = null,

    /* The list of custom routing flags to route payment to the intended acquirer. */
    @SerialName(value = "customRoutingFlags") val customRoutingFlags: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "diners") val diners: GenericPmWithTdiInfo? = null,

    @SerialName(value = "discover") val discover: GenericPmWithTdiInfo? = null,

    @SerialName(value = "eftpos_australia") val eftposAustralia: GenericPmWithTdiInfo? = null,

    @SerialName(value = "giroPay") val giroPay: GiroPayInfo? = null,

    @SerialName(value = "girocard") val girocard: GenericPmWithTdiInfo? = null,

    @SerialName(value = "googlePay") val googlePay: GooglePayInfo? = null,

    @SerialName(value = "ideal") val ideal: GenericPmWithTdiInfo? = null,

    @SerialName(value = "interac_card") val interacCard: GenericPmWithTdiInfo? = null,

    @SerialName(value = "jcb") val jcb: GenericPmWithTdiInfo? = null,

    @SerialName(value = "klarna") val klarna: KlarnaInfo? = null,

    @SerialName(value = "maestro") val maestro: GenericPmWithTdiInfo? = null,

    @SerialName(value = "mc") val mc: GenericPmWithTdiInfo? = null,

    @SerialName(value = "mealVoucher_FR") val mealVoucherFR: MealVoucherFRInfo? = null,

    @SerialName(value = "paypal") val paypal: PayPalInfo? = null,

    /* Your reference for the payment method. Supported characters a-z, A-Z, 0-9. */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /* The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**.  */
    @SerialName(value = "shopperInteraction") val shopperInteraction: PaymentMethodSetupInfo.ShopperInteraction? = null,

    @SerialName(value = "sofort") val sofort: SofortInfo? = null,

    /* The unique identifier of the store for which to configure the payment method, if any. */
    @SerialName(value = "storeIds") val storeIds: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "swish") val swish: SwishInfo? = null,

    @SerialName(value = "twint") val twint: TwintInfo? = null,

    @SerialName(value = "vipps") val vipps: VippsInfo? = null,

    @SerialName(value = "visa") val visa: GenericPmWithTdiInfo? = null

) {

    /**
     * Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
     *
     * Values: Afterpaytouch,Alipay,AlipayHk,Amex,Applepay,Bcmc,Blik,Cartebancaire,Clearpay,Cup,Diners,DirectdebitGB,Discover,EbankingFI,EftposAustralia,Elo,Elocredit,Elodebit,Girocard,Googlepay,Hiper,Hipercard,Ideal,InteracCard,Jcb,Klarna,KlarnaAccount,KlarnaPaynow,Maestro,Mbway,Mc,Mcdebit,MealVoucherFR,Mobilepay,Multibanco,OnlineBankingPL,Paybybank,Paypal,Payshop,Swish,Trustly,Twint,TwintPos,Vipps,Visa,Visadebit,Vpay,Wechatpay,WechatpayPos
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "afterpaytouch") Afterpaytouch("afterpaytouch"),
        @SerialName(value = "alipay") Alipay("alipay"),
        @SerialName(value = "alipay_hk") AlipayHk("alipay_hk"),
        @SerialName(value = "amex") Amex("amex"),
        @SerialName(value = "applepay") Applepay("applepay"),
        @SerialName(value = "bcmc") Bcmc("bcmc"),
        @SerialName(value = "blik") Blik("blik"),
        @SerialName(value = "cartebancaire") Cartebancaire("cartebancaire"),
        @SerialName(value = "clearpay") Clearpay("clearpay"),
        @SerialName(value = "cup") Cup("cup"),
        @SerialName(value = "diners") Diners("diners"),
        @SerialName(value = "directdebit_GB") DirectdebitGB("directdebit_GB"),
        @SerialName(value = "discover") Discover("discover"),
        @SerialName(value = "ebanking_FI") EbankingFI("ebanking_FI"),
        @SerialName(value = "eftpos_australia") EftposAustralia("eftpos_australia"),
        @SerialName(value = "elo") Elo("elo"),
        @SerialName(value = "elocredit") Elocredit("elocredit"),
        @SerialName(value = "elodebit") Elodebit("elodebit"),
        @SerialName(value = "girocard") Girocard("girocard"),
        @SerialName(value = "googlepay") Googlepay("googlepay"),
        @SerialName(value = "hiper") Hiper("hiper"),
        @SerialName(value = "hipercard") Hipercard("hipercard"),
        @SerialName(value = "ideal") Ideal("ideal"),
        @SerialName(value = "interac_card") InteracCard("interac_card"),
        @SerialName(value = "jcb") Jcb("jcb"),
        @SerialName(value = "klarna") Klarna("klarna"),
        @SerialName(value = "klarna_account") KlarnaAccount("klarna_account"),
        @SerialName(value = "klarna_paynow") KlarnaPaynow("klarna_paynow"),
        @SerialName(value = "maestro") Maestro("maestro"),
        @SerialName(value = "mbway") Mbway("mbway"),
        @SerialName(value = "mc") Mc("mc"),
        @SerialName(value = "mcdebit") Mcdebit("mcdebit"),
        @SerialName(value = "mealVoucher_FR") MealVoucherFR("mealVoucher_FR"),
        @SerialName(value = "mobilepay") Mobilepay("mobilepay"),
        @SerialName(value = "multibanco") Multibanco("multibanco"),
        @SerialName(value = "onlineBanking_PL") OnlineBankingPL("onlineBanking_PL"),
        @SerialName(value = "paybybank") Paybybank("paybybank"),
        @SerialName(value = "paypal") Paypal("paypal"),
        @SerialName(value = "payshop") Payshop("payshop"),
        @SerialName(value = "swish") Swish("swish"),
        @SerialName(value = "trustly") Trustly("trustly"),
        @SerialName(value = "twint") Twint("twint"),
        @SerialName(value = "twint_pos") TwintPos("twint_pos"),
        @SerialName(value = "vipps") Vipps("vipps"),
        @SerialName(value = "visa") Visa("visa"),
        @SerialName(value = "visadebit") Visadebit("visadebit"),
        @SerialName(value = "vpay") Vpay("vpay"),
        @SerialName(value = "wechatpay") Wechatpay("wechatpay"),
        @SerialName(value = "wechatpay_pos") WechatpayPos("wechatpay_pos");
    }
    /**
     * The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
     *
     * Values: ECommerce,Pos,Moto,ContAuth
     */
    @Serializable
    enum class ShopperInteraction(val value: kotlin.String) {
        @SerialName(value = "eCommerce") ECommerce("eCommerce"),
        @SerialName(value = "pos") Pos("pos"),
        @SerialName(value = "moto") Moto("moto"),
        @SerialName(value = "contAuth") ContAuth("contAuth");
    }
}

