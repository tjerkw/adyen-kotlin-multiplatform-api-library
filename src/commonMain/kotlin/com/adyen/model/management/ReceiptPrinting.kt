/**
 * Management API
 *
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.management


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param merchantApproved Print a merchant receipt when the payment is approved.
 * @param merchantCancelled Print a merchant receipt when the transaction is cancelled.
 * @param merchantCaptureApproved Print a merchant receipt when capturing the payment is approved.
 * @param merchantCaptureRefused Print a merchant receipt when capturing the payment is refused.
 * @param merchantRefundApproved Print a merchant receipt when the refund is approved.
 * @param merchantRefundRefused Print a merchant receipt when the refund is refused.
 * @param merchantRefused Print a merchant receipt when the payment is refused.
 * @param merchantVoid Print a merchant receipt when a previous transaction is voided.
 * @param shopperApproved Print a shopper receipt when the payment is approved.
 * @param shopperCancelled Print a shopper receipt when the transaction is cancelled.
 * @param shopperCaptureApproved Print a shopper receipt when capturing the payment is approved.
 * @param shopperCaptureRefused Print a shopper receipt when capturing the payment is refused.
 * @param shopperRefundApproved Print a shopper receipt when the refund is approved.
 * @param shopperRefundRefused Print a shopper receipt when the refund is refused.
 * @param shopperRefused Print a shopper receipt when the payment is refused.
 * @param shopperVoid Print a shopper receipt when a previous transaction is voided.
 */
@Serializable
data class ReceiptPrinting (

    /* Print a merchant receipt when the payment is approved. */
    @SerialName(value = "merchantApproved") val merchantApproved: kotlin.Boolean? = null,

    /* Print a merchant receipt when the transaction is cancelled. */
    @SerialName(value = "merchantCancelled") val merchantCancelled: kotlin.Boolean? = null,

    /* Print a merchant receipt when capturing the payment is approved. */
    @SerialName(value = "merchantCaptureApproved") val merchantCaptureApproved: kotlin.Boolean? = null,

    /* Print a merchant receipt when capturing the payment is refused. */
    @SerialName(value = "merchantCaptureRefused") val merchantCaptureRefused: kotlin.Boolean? = null,

    /* Print a merchant receipt when the refund is approved. */
    @SerialName(value = "merchantRefundApproved") val merchantRefundApproved: kotlin.Boolean? = null,

    /* Print a merchant receipt when the refund is refused. */
    @SerialName(value = "merchantRefundRefused") val merchantRefundRefused: kotlin.Boolean? = null,

    /* Print a merchant receipt when the payment is refused. */
    @SerialName(value = "merchantRefused") val merchantRefused: kotlin.Boolean? = null,

    /* Print a merchant receipt when a previous transaction is voided. */
    @SerialName(value = "merchantVoid") val merchantVoid: kotlin.Boolean? = null,

    /* Print a shopper receipt when the payment is approved. */
    @SerialName(value = "shopperApproved") val shopperApproved: kotlin.Boolean? = null,

    /* Print a shopper receipt when the transaction is cancelled. */
    @SerialName(value = "shopperCancelled") val shopperCancelled: kotlin.Boolean? = null,

    /* Print a shopper receipt when capturing the payment is approved. */
    @SerialName(value = "shopperCaptureApproved") val shopperCaptureApproved: kotlin.Boolean? = null,

    /* Print a shopper receipt when capturing the payment is refused. */
    @SerialName(value = "shopperCaptureRefused") val shopperCaptureRefused: kotlin.Boolean? = null,

    /* Print a shopper receipt when the refund is approved. */
    @SerialName(value = "shopperRefundApproved") val shopperRefundApproved: kotlin.Boolean? = null,

    /* Print a shopper receipt when the refund is refused. */
    @SerialName(value = "shopperRefundRefused") val shopperRefundRefused: kotlin.Boolean? = null,

    /* Print a shopper receipt when the payment is refused. */
    @SerialName(value = "shopperRefused") val shopperRefused: kotlin.Boolean? = null,

    /* Print a shopper receipt when a previous transaction is voided. */
    @SerialName(value = "shopperVoid") val shopperVoid: kotlin.Boolean? = null

)

