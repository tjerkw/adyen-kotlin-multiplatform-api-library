/**
 * Authentication webhooks
 *
 * Adyen sends webhooks to inform your system about events related to cardholder authentication.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.acswebhooks

import com.adyen.model.acswebhooks.ChallengeInfo

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param acsTransId Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
 * @param challengeIndicator Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) 
 * @param createdAt Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
 * @param deviceChannel Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)
 * @param dsTransID Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction.
 * @param inPSD2Scope Indicates if the purchase was in the PSD2 scope.
 * @param messageCategory Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**
 * @param messageVersion The `messageVersion` value as defined in the 3D Secure 2 specification.
 * @param threeDSServerTransID The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.
 * @param transStatus The `transStatus` value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. 
 * @param type The type of authentication performed. Possible values:  * **frictionless** * **challenge**
 * @param challenge 
 * @param exemptionIndicator Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** 
 * @param riskScore Risk score calculated from the transaction rules.
 * @param transStatusReason Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
 */
@Serializable
data class AuthenticationInfo (

    /* Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction. */
    @SerialName(value = "acsTransId") @Required val acsTransId: kotlin.String,

    /* Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa)  */
    @SerialName(value = "challengeIndicator") @Required val challengeIndicator: AuthenticationInfo.ChallengeIndicator,

    /* Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**. */
    @SerialName(value = "createdAt") @Required val createdAt: kotlin.String,

    /* Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available) */
    @SerialName(value = "deviceChannel") @Required val deviceChannel: AuthenticationInfo.DeviceChannel,

    /* Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction. */
    @SerialName(value = "dsTransID") @Required val dsTransID: kotlin.String,

    /* Indicates if the purchase was in the PSD2 scope. */
    @SerialName(value = "inPSD2Scope") @Required val inPSD2Scope: kotlin.Boolean,

    /* Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment** */
    @SerialName(value = "messageCategory") @Required val messageCategory: AuthenticationInfo.MessageCategory,

    /* The `messageVersion` value as defined in the 3D Secure 2 specification. */
    @SerialName(value = "messageVersion") @Required val messageVersion: kotlin.String,

    /* The `threeDSServerTransID` value as defined in the 3D Secure 2 specification. */
    @SerialName(value = "threeDSServerTransID") @Required val threeDSServerTransID: kotlin.String,

    /* The `transStatus` value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer.  */
    @SerialName(value = "transStatus") @Required val transStatus: AuthenticationInfo.TransStatus,

    /* The type of authentication performed. Possible values:  * **frictionless** * **challenge** */
    @SerialName(value = "type") @Required val type: AuthenticationInfo.Type,

    @SerialName(value = "challenge") val challenge: ChallengeInfo? = null,

    /* Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption**  */
    @SerialName(value = "exemptionIndicator") val exemptionIndicator: AuthenticationInfo.ExemptionIndicator? = null,

    /* Risk score calculated from the transaction rules. */
    @SerialName(value = "riskScore") val riskScore: kotlin.Int? = null,

    /* Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values). */
    @SerialName(value = "transStatusReason") val transStatusReason: AuthenticationInfo.TransStatusReason? = null

) {

    /**
     * Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) 
     *
     * Values: _01,_02,_03,_04,_05,_07,_08,_09,_80,_82
     */
    @Serializable
    enum class ChallengeIndicator(val value: kotlin.String) {
        @SerialName(value = "01") _01("01"),
        @SerialName(value = "02") _02("02"),
        @SerialName(value = "03") _03("03"),
        @SerialName(value = "04") _04("04"),
        @SerialName(value = "05") _05("05"),
        @SerialName(value = "07") _07("07"),
        @SerialName(value = "08") _08("08"),
        @SerialName(value = "09") _09("09"),
        @SerialName(value = "80") _80("80"),
        @SerialName(value = "82") _82("82");
    }
    /**
     * Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)
     *
     * Values: App,Browser,ThreeDSRequestorInitiated
     */
    @Serializable
    enum class DeviceChannel(val value: kotlin.String) {
        @SerialName(value = "app") App("app"),
        @SerialName(value = "browser") Browser("browser"),
        @SerialName(value = "ThreeDSRequestorInitiated") ThreeDSRequestorInitiated("ThreeDSRequestorInitiated");
    }
    /**
     * Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**
     *
     * Values: Payment,NonPayment
     */
    @Serializable
    enum class MessageCategory(val value: kotlin.String) {
        @SerialName(value = "payment") Payment("payment"),
        @SerialName(value = "nonPayment") NonPayment("nonPayment");
    }
    /**
     * The `transStatus` value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. 
     *
     * Values: Y,N,R,I,U
     */
    @Serializable
    enum class TransStatus(val value: kotlin.String) {
        @SerialName(value = "Y") Y("Y"),
        @SerialName(value = "N") N("N"),
        @SerialName(value = "R") R("R"),
        @SerialName(value = "I") I("I"),
        @SerialName(value = "U") U("U");
    }
    /**
     * The type of authentication performed. Possible values:  * **frictionless** * **challenge**
     *
     * Values: Frictionless,Challenge
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "frictionless") Frictionless("frictionless"),
        @SerialName(value = "challenge") Challenge("challenge");
    }
    /**
     * Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** 
     *
     * Values: LowValue,SecureCorporate,TrustedBeneficiary,TransactionRiskAnalysis,AcquirerExemption,NoExemptionApplied,VisaDAFExemption
     */
    @Serializable
    enum class ExemptionIndicator(val value: kotlin.String) {
        @SerialName(value = "lowValue") LowValue("lowValue"),
        @SerialName(value = "secureCorporate") SecureCorporate("secureCorporate"),
        @SerialName(value = "trustedBeneficiary") TrustedBeneficiary("trustedBeneficiary"),
        @SerialName(value = "transactionRiskAnalysis") TransactionRiskAnalysis("transactionRiskAnalysis"),
        @SerialName(value = "acquirerExemption") AcquirerExemption("acquirerExemption"),
        @SerialName(value = "noExemptionApplied") NoExemptionApplied("noExemptionApplied"),
        @SerialName(value = "visaDAFExemption") VisaDAFExemption("visaDAFExemption");
    }
    /**
     * Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
     *
     * Values: _01,_02,_03,_04,_05,_06,_07,_08,_09,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_80,_81,_82,_83,_84,_85,_86,_87,_88
     */
    @Serializable
    enum class TransStatusReason(val value: kotlin.String) {
        @SerialName(value = "01") _01("01"),
        @SerialName(value = "02") _02("02"),
        @SerialName(value = "03") _03("03"),
        @SerialName(value = "04") _04("04"),
        @SerialName(value = "05") _05("05"),
        @SerialName(value = "06") _06("06"),
        @SerialName(value = "07") _07("07"),
        @SerialName(value = "08") _08("08"),
        @SerialName(value = "09") _09("09"),
        @SerialName(value = "10") _10("10"),
        @SerialName(value = "11") _11("11"),
        @SerialName(value = "12") _12("12"),
        @SerialName(value = "13") _13("13"),
        @SerialName(value = "14") _14("14"),
        @SerialName(value = "15") _15("15"),
        @SerialName(value = "16") _16("16"),
        @SerialName(value = "17") _17("17"),
        @SerialName(value = "18") _18("18"),
        @SerialName(value = "19") _19("19"),
        @SerialName(value = "20") _20("20"),
        @SerialName(value = "21") _21("21"),
        @SerialName(value = "22") _22("22"),
        @SerialName(value = "23") _23("23"),
        @SerialName(value = "24") _24("24"),
        @SerialName(value = "25") _25("25"),
        @SerialName(value = "26") _26("26"),
        @SerialName(value = "80") _80("80"),
        @SerialName(value = "81") _81("81"),
        @SerialName(value = "82") _82("82"),
        @SerialName(value = "83") _83("83"),
        @SerialName(value = "84") _84("84"),
        @SerialName(value = "85") _85("85"),
        @SerialName(value = "86") _86("86"),
        @SerialName(value = "87") _87("87"),
        @SerialName(value = "88") _88("88");
    }
}

