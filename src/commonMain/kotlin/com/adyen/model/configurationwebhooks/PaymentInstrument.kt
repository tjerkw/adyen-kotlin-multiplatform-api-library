/**
 * Configuration webhooks
 *
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.configurationwebhooks

import com.adyen.model.configurationwebhooks.Card
import com.adyen.model.configurationwebhooks.PaymentInstrumentBankAccount

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param balanceAccountId The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
 * @param id The unique identifier of the payment instrument.
 * @param issuingCountryCode The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
 * @param type Type of payment instrument.  Possible value: **card**, **bankAccount**. 
 * @param bankAccount 
 * @param card 
 * @param description Your description for the payment instrument, maximum 300 characters.
 * @param paymentInstrumentGroupId The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
 * @param reference Your reference for the payment instrument, maximum 150 characters.
 * @param status The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   
 */
@Serializable
data class PaymentInstrument (

    /* The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument. */
    @SerialName(value = "balanceAccountId") @Required val balanceAccountId: kotlin.String,

    /* The unique identifier of the payment instrument. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**. */
    @SerialName(value = "issuingCountryCode") @Required val issuingCountryCode: kotlin.String,

    /* Type of payment instrument.  Possible value: **card**, **bankAccount**.  */
    @SerialName(value = "type") @Required val type: PaymentInstrument.Type,

    @SerialName(value = "bankAccount") val bankAccount: PaymentInstrumentBankAccount? = null,

    @SerialName(value = "card") val card: Card? = null,

    /* Your description for the payment instrument, maximum 300 characters. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs. */
    @SerialName(value = "paymentInstrumentGroupId") val paymentInstrumentGroupId: kotlin.String? = null,

    /* Your reference for the payment instrument, maximum 150 characters. */
    @SerialName(value = "reference") val reference: kotlin.String? = null,

    /* The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**    */
    @SerialName(value = "status") val status: PaymentInstrument.Status? = null

) {

    /**
     * Type of payment instrument.  Possible value: **card**, **bankAccount**. 
     *
     * Values: BankAccount,Card
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "bankAccount") BankAccount("bankAccount"),
        @SerialName(value = "card") Card("card");
    }
    /**
     * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   
     *
     * Values: Active,Closed,Inactive,Lost,Requested,Stolen,Suspended,Blocked,Discarded
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "Active") Active("Active"),
        @SerialName(value = "Closed") Closed("Closed"),
        @SerialName(value = "Inactive") Inactive("Inactive"),
        @SerialName(value = "Lost") Lost("Lost"),
        @SerialName(value = "Requested") Requested("Requested"),
        @SerialName(value = "Stolen") Stolen("Stolen"),
        @SerialName(value = "Suspended") Suspended("Suspended"),
        @SerialName(value = "blocked") Blocked("blocked"),
        @SerialName(value = "discarded") Discarded("discarded");
    }
}

