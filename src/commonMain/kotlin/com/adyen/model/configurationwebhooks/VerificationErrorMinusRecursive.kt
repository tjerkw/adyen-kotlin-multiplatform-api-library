/**
 * Configuration webhooks
 *
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.configurationwebhooks

import com.adyen.model.configurationwebhooks.RemediatingAction

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param capabilities Contains the capabilities that the verification error applies to.
 * @param code The verification error code.
 * @param message A description of the error.
 * @param type The type of error.   Possible values: **invalidInput**, **dataMissing**.
 * @param remediatingActions Contains the actions that you can take to resolve the verification error.
 */
@Serializable
data class VerificationErrorMinusRecursive (

    /* Contains the capabilities that the verification error applies to. */
    @SerialName(value = "capabilities") val capabilities: kotlin.collections.List<VerificationErrorMinusRecursive.Capabilities>? = null,

    /* The verification error code. */
    @SerialName(value = "code") val code: kotlin.String? = null,

    /* A description of the error. */
    @SerialName(value = "message") val message: kotlin.String? = null,

    /* The type of error.   Possible values: **invalidInput**, **dataMissing**. */
    @SerialName(value = "type") val type: VerificationErrorMinusRecursive.Type? = null,

    /* Contains the actions that you can take to resolve the verification error. */
    @SerialName(value = "remediatingActions") val remediatingActions: kotlin.collections.List<RemediatingAction>? = null

) {

    /**
     * Contains the capabilities that the verification error applies to.
     *
     * Values: AcceptExternalFunding,AcceptPspFunding,AcceptTransactionInRestrictedCountries,AcceptTransactionInRestrictedCountriesCommercial,AcceptTransactionInRestrictedCountriesConsumer,AcceptTransactionInRestrictedIndustries,AcceptTransactionInRestrictedIndustriesCommercial,AcceptTransactionInRestrictedIndustriesConsumer,Acquiring,AtmWithdrawal,AtmWithdrawalCommercial,AtmWithdrawalConsumer,AtmWithdrawalInRestrictedCountries,AtmWithdrawalInRestrictedCountriesCommercial,AtmWithdrawalInRestrictedCountriesConsumer,AuthorisedPaymentInstrumentUser,GetGrantOffers,IssueBankAccount,IssueCard,IssueCardCommercial,IssueCardConsumer,LocalAcceptance,Payout,PayoutToTransferInstrument,Processing,ReceiveFromBalanceAccount,ReceiveFromPlatformPayments,ReceiveFromThirdParty,ReceiveFromTransferInstrument,ReceiveGrants,ReceivePayments,SendToBalanceAccount,SendToThirdParty,SendToTransferInstrument,ThirdPartyFunding,UseCard,UseCardCommercial,UseCardConsumer,UseCardInRestrictedCountries,UseCardInRestrictedCountriesCommercial,UseCardInRestrictedCountriesConsumer,UseCardInRestrictedIndustries,UseCardInRestrictedIndustriesCommercial,UseCardInRestrictedIndustriesConsumer,WithdrawFromAtm,WithdrawFromAtmCommercial,WithdrawFromAtmConsumer,WithdrawFromAtmInRestrictedCountries,WithdrawFromAtmInRestrictedCountriesCommercial,WithdrawFromAtmInRestrictedCountriesConsumer
     */
    @Serializable
    enum class Capabilities(val value: kotlin.String) {
        @SerialName(value = "acceptExternalFunding") AcceptExternalFunding("acceptExternalFunding"),
        @SerialName(value = "acceptPspFunding") AcceptPspFunding("acceptPspFunding"),
        @SerialName(value = "acceptTransactionInRestrictedCountries") AcceptTransactionInRestrictedCountries("acceptTransactionInRestrictedCountries"),
        @SerialName(value = "acceptTransactionInRestrictedCountriesCommercial") AcceptTransactionInRestrictedCountriesCommercial("acceptTransactionInRestrictedCountriesCommercial"),
        @SerialName(value = "acceptTransactionInRestrictedCountriesConsumer") AcceptTransactionInRestrictedCountriesConsumer("acceptTransactionInRestrictedCountriesConsumer"),
        @SerialName(value = "acceptTransactionInRestrictedIndustries") AcceptTransactionInRestrictedIndustries("acceptTransactionInRestrictedIndustries"),
        @SerialName(value = "acceptTransactionInRestrictedIndustriesCommercial") AcceptTransactionInRestrictedIndustriesCommercial("acceptTransactionInRestrictedIndustriesCommercial"),
        @SerialName(value = "acceptTransactionInRestrictedIndustriesConsumer") AcceptTransactionInRestrictedIndustriesConsumer("acceptTransactionInRestrictedIndustriesConsumer"),
        @SerialName(value = "acquiring") Acquiring("acquiring"),
        @SerialName(value = "atmWithdrawal") AtmWithdrawal("atmWithdrawal"),
        @SerialName(value = "atmWithdrawalCommercial") AtmWithdrawalCommercial("atmWithdrawalCommercial"),
        @SerialName(value = "atmWithdrawalConsumer") AtmWithdrawalConsumer("atmWithdrawalConsumer"),
        @SerialName(value = "atmWithdrawalInRestrictedCountries") AtmWithdrawalInRestrictedCountries("atmWithdrawalInRestrictedCountries"),
        @SerialName(value = "atmWithdrawalInRestrictedCountriesCommercial") AtmWithdrawalInRestrictedCountriesCommercial("atmWithdrawalInRestrictedCountriesCommercial"),
        @SerialName(value = "atmWithdrawalInRestrictedCountriesConsumer") AtmWithdrawalInRestrictedCountriesConsumer("atmWithdrawalInRestrictedCountriesConsumer"),
        @SerialName(value = "authorisedPaymentInstrumentUser") AuthorisedPaymentInstrumentUser("authorisedPaymentInstrumentUser"),
        @SerialName(value = "getGrantOffers") GetGrantOffers("getGrantOffers"),
        @SerialName(value = "issueBankAccount") IssueBankAccount("issueBankAccount"),
        @SerialName(value = "issueCard") IssueCard("issueCard"),
        @SerialName(value = "issueCardCommercial") IssueCardCommercial("issueCardCommercial"),
        @SerialName(value = "issueCardConsumer") IssueCardConsumer("issueCardConsumer"),
        @SerialName(value = "localAcceptance") LocalAcceptance("localAcceptance"),
        @SerialName(value = "payout") Payout("payout"),
        @SerialName(value = "payoutToTransferInstrument") PayoutToTransferInstrument("payoutToTransferInstrument"),
        @SerialName(value = "processing") Processing("processing"),
        @SerialName(value = "receiveFromBalanceAccount") ReceiveFromBalanceAccount("receiveFromBalanceAccount"),
        @SerialName(value = "receiveFromPlatformPayments") ReceiveFromPlatformPayments("receiveFromPlatformPayments"),
        @SerialName(value = "receiveFromThirdParty") ReceiveFromThirdParty("receiveFromThirdParty"),
        @SerialName(value = "receiveFromTransferInstrument") ReceiveFromTransferInstrument("receiveFromTransferInstrument"),
        @SerialName(value = "receiveGrants") ReceiveGrants("receiveGrants"),
        @SerialName(value = "receivePayments") ReceivePayments("receivePayments"),
        @SerialName(value = "sendToBalanceAccount") SendToBalanceAccount("sendToBalanceAccount"),
        @SerialName(value = "sendToThirdParty") SendToThirdParty("sendToThirdParty"),
        @SerialName(value = "sendToTransferInstrument") SendToTransferInstrument("sendToTransferInstrument"),
        @SerialName(value = "thirdPartyFunding") ThirdPartyFunding("thirdPartyFunding"),
        @SerialName(value = "useCard") UseCard("useCard"),
        @SerialName(value = "useCardCommercial") UseCardCommercial("useCardCommercial"),
        @SerialName(value = "useCardConsumer") UseCardConsumer("useCardConsumer"),
        @SerialName(value = "useCardInRestrictedCountries") UseCardInRestrictedCountries("useCardInRestrictedCountries"),
        @SerialName(value = "useCardInRestrictedCountriesCommercial") UseCardInRestrictedCountriesCommercial("useCardInRestrictedCountriesCommercial"),
        @SerialName(value = "useCardInRestrictedCountriesConsumer") UseCardInRestrictedCountriesConsumer("useCardInRestrictedCountriesConsumer"),
        @SerialName(value = "useCardInRestrictedIndustries") UseCardInRestrictedIndustries("useCardInRestrictedIndustries"),
        @SerialName(value = "useCardInRestrictedIndustriesCommercial") UseCardInRestrictedIndustriesCommercial("useCardInRestrictedIndustriesCommercial"),
        @SerialName(value = "useCardInRestrictedIndustriesConsumer") UseCardInRestrictedIndustriesConsumer("useCardInRestrictedIndustriesConsumer"),
        @SerialName(value = "withdrawFromAtm") WithdrawFromAtm("withdrawFromAtm"),
        @SerialName(value = "withdrawFromAtmCommercial") WithdrawFromAtmCommercial("withdrawFromAtmCommercial"),
        @SerialName(value = "withdrawFromAtmConsumer") WithdrawFromAtmConsumer("withdrawFromAtmConsumer"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountries") WithdrawFromAtmInRestrictedCountries("withdrawFromAtmInRestrictedCountries"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountriesCommercial") WithdrawFromAtmInRestrictedCountriesCommercial("withdrawFromAtmInRestrictedCountriesCommercial"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountriesConsumer") WithdrawFromAtmInRestrictedCountriesConsumer("withdrawFromAtmInRestrictedCountriesConsumer");
    }
    /**
     * The type of error.   Possible values: **invalidInput**, **dataMissing**.
     *
     * Values: DataMissing,InvalidInput,PendingStatus
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "dataMissing") DataMissing("dataMissing"),
        @SerialName(value = "invalidInput") InvalidInput("invalidInput"),
        @SerialName(value = "pendingStatus") PendingStatus("pendingStatus");
    }
}

