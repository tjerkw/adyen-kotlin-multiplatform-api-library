/**
 * Configuration webhooks
 *
 * Adyen sends webhooks to inform your system about events that occur in your platform. These events include, for example, when an account holder's capabilities are updated, or when a sweep configuration is created or updated.  When an event occurs, Adyen makes an HTTP POST request to a URL on your server and includes the details of the event in the request body.  You can use these webhooks to build your implementation. For example, you can use this information to update internal statuses when the status of a capability is changed.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.configurationwebhooks

import com.adyen.model.configurationwebhooks.Amount
import com.adyen.model.configurationwebhooks.SweepCounterparty
import com.adyen.model.configurationwebhooks.SweepSchedule

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param counterparty 
 * @param currency The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
 * @param id The unique identifier of the sweep.
 * @param schedule 
 * @param description The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.  If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
 * @param reason The reason for disabling the sweep.
 * @param status The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   
 * @param sweepAmount 
 * @param targetAmount 
 * @param triggerAmount 
 * @param type The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
 */
@Serializable
data class SweepConfigurationV2 (

    @SerialName(value = "counterparty") @Required val counterparty: SweepCounterparty,

    /* The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.  The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances). */
    @SerialName(value = "currency") @Required val currency: kotlin.String,

    /* The unique identifier of the sweep. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    @SerialName(value = "schedule") @Required val schedule: SweepSchedule,

    /* The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.  If the message is longer after replacing placeholders, the message will be cut off at 140 characters. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* The reason for disabling the sweep. */
    @SerialName(value = "reason") val reason: SweepConfigurationV2.Reason? = null,

    /* The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.    */
    @SerialName(value = "status") val status: SweepConfigurationV2.Status? = null,

    @SerialName(value = "sweepAmount") val sweepAmount: Amount? = null,

    @SerialName(value = "targetAmount") val targetAmount: Amount? = null,

    @SerialName(value = "triggerAmount") val triggerAmount: Amount? = null,

    /* The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account. */
    @SerialName(value = "type") val type: SweepConfigurationV2.Type? = Type.Push

) {

    /**
     * The reason for disabling the sweep.
     *
     * Values: AmountLimitExceeded,Approved,BalanceAccountTemporarilyBlockedByTransactionRule,CounterpartyAccountBlocked,CounterpartyAccountClosed,CounterpartyAccountNotFound,CounterpartyAddressRequired,CounterpartyBankTimedOut,CounterpartyBankUnavailable,DeclinedByTransactionRule,Error,NotEnoughBalance,RefusedByCounterpartyBank,RouteNotFound,ScaFailed,Unknown
     */
    @Serializable
    enum class Reason(val value: kotlin.String) {
        @SerialName(value = "amountLimitExceeded") AmountLimitExceeded("amountLimitExceeded"),
        @SerialName(value = "approved") Approved("approved"),
        @SerialName(value = "balanceAccountTemporarilyBlockedByTransactionRule") BalanceAccountTemporarilyBlockedByTransactionRule("balanceAccountTemporarilyBlockedByTransactionRule"),
        @SerialName(value = "counterpartyAccountBlocked") CounterpartyAccountBlocked("counterpartyAccountBlocked"),
        @SerialName(value = "counterpartyAccountClosed") CounterpartyAccountClosed("counterpartyAccountClosed"),
        @SerialName(value = "counterpartyAccountNotFound") CounterpartyAccountNotFound("counterpartyAccountNotFound"),
        @SerialName(value = "counterpartyAddressRequired") CounterpartyAddressRequired("counterpartyAddressRequired"),
        @SerialName(value = "counterpartyBankTimedOut") CounterpartyBankTimedOut("counterpartyBankTimedOut"),
        @SerialName(value = "counterpartyBankUnavailable") CounterpartyBankUnavailable("counterpartyBankUnavailable"),
        @SerialName(value = "declinedByTransactionRule") DeclinedByTransactionRule("declinedByTransactionRule"),
        @SerialName(value = "error") Error("error"),
        @SerialName(value = "notEnoughBalance") NotEnoughBalance("notEnoughBalance"),
        @SerialName(value = "refusedByCounterpartyBank") RefusedByCounterpartyBank("refusedByCounterpartyBank"),
        @SerialName(value = "routeNotFound") RouteNotFound("routeNotFound"),
        @SerialName(value = "scaFailed") ScaFailed("scaFailed"),
        @SerialName(value = "unknown") Unknown("unknown");
    }
    /**
     * The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   
     *
     * Values: Active,Inactive
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "active") Active("active"),
        @SerialName(value = "inactive") Inactive("inactive");
    }
    /**
     * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
     *
     * Values: Pull,Push
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "pull") Pull("pull"),
        @SerialName(value = "push") Push("push");
    }
}

