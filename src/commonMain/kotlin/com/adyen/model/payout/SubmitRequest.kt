/**
 * Adyen Payout API
 *
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Online payouts](https://docs.adyen.com/online-payments/online-payouts). ## Authentication To use the Payout API, you need to have [two API credentials](https://docs.adyen.com/online-payments/online-payouts#payouts-to-bank-accounts-and-wallets): one for storing payout details and submitting payouts, and another one for confirming or declining payouts. If you don't have the required API credentials, contact our [Support Team](https://www.adyen.help/hc/en-us/requests/new).  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using [basic authentication](https://docs.adyen.com/development-resources/api-credentials#basic-authentication).  The following example shows how to authenticate your request with basic authentication when submitting a payout:  ``` curl -U \"storePayout@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payout/v68/payout ```  ## Going live  To authenticate to the live endpoints, you need [API credentials](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payout/v68/payout ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.payout

import com.adyen.model.payout.Amount
import com.adyen.model.payout.Name
import com.adyen.model.payout.Recurring

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param amount 
 * @param merchantAccount The merchant account identifier you want to process the transaction request with.
 * @param recurring 
 * @param reference The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
 * @param selectedRecurringDetailReference This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail.
 * @param shopperEmail The shopper's email address.
 * @param shopperReference The shopper's reference for the payout transaction.
 * @param additionalData This field contains additional data, which may be required for a particular request.
 * @param dateOfBirth The date of birth. Format: ISO-8601; example: YYYY-MM-DD  For Paysafecard it must be the same as used when registering the Paysafecard account.  > This field is mandatory for natural persons.  > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract.
 * @param entityType The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract.
 * @param fraudOffset An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @param nationality The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').  > This field is required to update the existing nationality that is associated with this recurring contract.
 * @param shopperName 
 * @param shopperStatement The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).
 * @param socialSecurityNumber The shopper's social security number.
 */
@Serializable
data class SubmitRequest (

    @SerialName(value = "amount") @Required val amount: Amount,

    /* The merchant account identifier you want to process the transaction request with. */
    @SerialName(value = "merchantAccount") @Required val merchantAccount: kotlin.String,

    @SerialName(value = "recurring") @Required val recurring: Recurring,

    /* The merchant reference for this payout. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement. */
    @SerialName(value = "reference") @Required val reference: kotlin.String,

    /* This is the `recurringDetailReference` you want to use for this payout.  You can use the value LATEST to select the most recently used recurring detail. */
    @SerialName(value = "selectedRecurringDetailReference") @Required val selectedRecurringDetailReference: kotlin.String,

    /* The shopper's email address. */
    @SerialName(value = "shopperEmail") @Required val shopperEmail: kotlin.String,

    /* The shopper's reference for the payout transaction. */
    @SerialName(value = "shopperReference") @Required val shopperReference: kotlin.String,

    /* This field contains additional data, which may be required for a particular request. */
    @SerialName(value = "additionalData") val additionalData: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* The date of birth. Format: ISO-8601; example: YYYY-MM-DD  For Paysafecard it must be the same as used when registering the Paysafecard account.  > This field is mandatory for natural persons.  > This field is required to update the existing `dateOfBirth` that is associated with this recurring contract. */
    @SerialName(value = "dateOfBirth") val dateOfBirth: kotlin.String? = null,

    /* The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract. */
    @SerialName(value = "entityType") val entityType: SubmitRequest.EntityType? = null,

    /* An integer value that is added to the normal fraud score. The value can be either positive or negative. */
    @SerialName(value = "fraudOffset") val fraudOffset: kotlin.Int? = null,

    /* The shopper's nationality.  A valid value is an ISO 2-character country code (e.g. 'NL').  > This field is required to update the existing nationality that is associated with this recurring contract. */
    @SerialName(value = "nationality") val nationality: kotlin.String? = null,

    @SerialName(value = "shopperName") val shopperName: Name? = null,

    /* The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method). */
    @SerialName(value = "shopperStatement") val shopperStatement: kotlin.String? = null,

    /* The shopper's social security number. */
    @SerialName(value = "socialSecurityNumber") val socialSecurityNumber: kotlin.String? = null

) {

    /**
     * The type of the entity the payout is processed for.  Allowed values: * NaturalPerson * Company > This field is required to update the existing `entityType` that is associated with this recurring contract.
     *
     * Values: NaturalPerson,Company
     */
    @Serializable
    enum class EntityType(val value: kotlin.String) {
        @SerialName(value = "NaturalPerson") NaturalPerson("NaturalPerson"),
        @SerialName(value = "Company") Company("Company");
    }
}

