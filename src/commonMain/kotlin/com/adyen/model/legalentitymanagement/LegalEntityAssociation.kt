/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param legalEntityId The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
 * @param type Defines the relationship of the legal entity to the current legal entity.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.
 * @param associatorId The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.
 * @param entityType The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.
 * @param jobTitle The individual's job title if the `type` is **uboThroughControl** or **signatory**.
 * @param name The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, `name.firstName` and `name.lastName`. - For **organization**, `legalName`. - For **soleProprietorship**, `name`.
 * @param settlorExemptionReason Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.
 */
@Serializable
data class LegalEntityAssociation (

    /* The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id). */
    @SerialName(value = "legalEntityId") @Required val legalEntityId: kotlin.String,

    /* Defines the relationship of the legal entity to the current legal entity.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**. */
    @SerialName(value = "type") @Required val type: LegalEntityAssociation.Type,

    /* The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations. */
    @SerialName(value = "associatorId") val associatorId: kotlin.String? = null,

    /* The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**. */
    @SerialName(value = "entityType") val entityType: kotlin.String? = null,

    /* The individual's job title if the `type` is **uboThroughControl** or **signatory**. */
    @SerialName(value = "jobTitle") val jobTitle: kotlin.String? = null,

    /* The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, `name.firstName` and `name.lastName`. - For **organization**, `legalName`. - For **soleProprietorship**, `name`. */
    @SerialName(value = "name") val name: kotlin.String? = null,

    /* Defines the Kyc Exemption Reason for a Settlor associated with a trust.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**. */
    @SerialName(value = "settlorExemptionReason") val settlorExemptionReason: kotlin.collections.List<kotlin.String>? = null

) {

    /**
     * Defines the relationship of the legal entity to the current legal entity.  Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **director**, **signatory**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.
     *
     * Values: DefinedBeneficiary,Director,PciSignatory,Protector,SecondaryTrustee,Settlor,Signatory,SoleProprietorship,Trust,TrustOwnership,UboThroughControl,UboThroughOwnership,UltimateParentCompany,UndefinedBeneficiary
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "definedBeneficiary") DefinedBeneficiary("definedBeneficiary"),
        @SerialName(value = "director") Director("director"),
        @SerialName(value = "pciSignatory") PciSignatory("pciSignatory"),
        @SerialName(value = "protector") Protector("protector"),
        @SerialName(value = "secondaryTrustee") SecondaryTrustee("secondaryTrustee"),
        @SerialName(value = "settlor") Settlor("settlor"),
        @SerialName(value = "signatory") Signatory("signatory"),
        @SerialName(value = "soleProprietorship") SoleProprietorship("soleProprietorship"),
        @SerialName(value = "trust") Trust("trust"),
        @SerialName(value = "trustOwnership") TrustOwnership("trustOwnership"),
        @SerialName(value = "uboThroughControl") UboThroughControl("uboThroughControl"),
        @SerialName(value = "uboThroughOwnership") UboThroughOwnership("uboThroughOwnership"),
        @SerialName(value = "ultimateParentCompany") UltimateParentCompany("ultimateParentCompany"),
        @SerialName(value = "undefinedBeneficiary") UndefinedBeneficiary("undefinedBeneficiary");
    }
}

