/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement


import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param country The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
 * @param city The name of the city. Required if `stateOrProvince` is provided.  If you specify the city, you must also send `postalCode` and `street`.
 * @param postalCode Postal code. Required if `stateOrProvince` and/or `city` is provided.
 * @param stateOrProvince The two-letter ISO 3166-2 state or province code. For example, **CA** in the US.  If you specify the state or province, you must also send `city`, `postalCode`, and `street`.
 * @param street The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.
 * @param street2 The apartment, unit, or suite number.
 */
@Serializable
data class Address (

    /* The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. */
    @SerialName(value = "country") @Required val country: kotlin.String,

    /* The name of the city. Required if `stateOrProvince` is provided.  If you specify the city, you must also send `postalCode` and `street`. */
    @SerialName(value = "city") val city: kotlin.String? = null,

    /* Postal code. Required if `stateOrProvince` and/or `city` is provided. */
    @SerialName(value = "postalCode") val postalCode: kotlin.String? = null,

    /* The two-letter ISO 3166-2 state or province code. For example, **CA** in the US.  If you specify the state or province, you must also send `city`, `postalCode`, and `street`. */
    @SerialName(value = "stateOrProvince") val stateOrProvince: kotlin.String? = null,

    /* The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided. */
    @SerialName(value = "street") val street: kotlin.String? = null,

    /* The apartment, unit, or suite number. */
    @SerialName(value = "street2") val street2: kotlin.String? = null

)

