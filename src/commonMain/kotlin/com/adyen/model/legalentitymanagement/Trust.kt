/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement

import com.adyen.model.legalentitymanagement.Address
import com.adyen.model.legalentitymanagement.TaxInformation
import com.adyen.model.legalentitymanagement.UndefinedBeneficiary

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param countryOfGoverningLaw The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
 * @param name The legal name.
 * @param registeredAddress 
 * @param type Type of trust.  Possible values for Australian trusts: **cashManagementTrust**, **corporateUnitTrust**, **deceasedEstate**, **discretionaryInvestmentTrust**, **discretionaryServicesManagementTrust**, **discretionaryTradingTrust**, **firstHomeSaverAccountsTrust**, **fixedTrust**, **fixedUnitTrust**, **hybridTrust**, **listedPublicUnitTrust**, **otherTrust**, **pooledSuperannuationTrust**, **publicTradingTrust**, **unlistedPublicUnitTrust**.
 * @param dateOfIncorporation The date when the legal arrangement was incorporated in YYYY-MM-DD format.
 * @param description Short description about the trust.
 * @param doingBusinessAs The registered name, if different from the `name`.
 * @param principalPlaceOfBusiness 
 * @param registrationNumber The registration number.
 * @param taxInformation The tax information of the entity.
 * @param undefinedBeneficiaryInfo The undefined beneficiary information of the entity.
 * @param vatAbsenceReason The reason for not providing a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
 * @param vatNumber The VAT number.
 */
@Serializable
data class Trust (

    /* The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country. */
    @SerialName(value = "countryOfGoverningLaw") @Required val countryOfGoverningLaw: kotlin.String,

    /* The legal name. */
    @SerialName(value = "name") @Required val name: kotlin.String,

    @SerialName(value = "registeredAddress") @Required val registeredAddress: Address,

    /* Type of trust.  Possible values for Australian trusts: **cashManagementTrust**, **corporateUnitTrust**, **deceasedEstate**, **discretionaryInvestmentTrust**, **discretionaryServicesManagementTrust**, **discretionaryTradingTrust**, **firstHomeSaverAccountsTrust**, **fixedTrust**, **fixedUnitTrust**, **hybridTrust**, **listedPublicUnitTrust**, **otherTrust**, **pooledSuperannuationTrust**, **publicTradingTrust**, **unlistedPublicUnitTrust**. */
    @SerialName(value = "type") @Required val type: Trust.Type,

    /* The date when the legal arrangement was incorporated in YYYY-MM-DD format. */
    @SerialName(value = "dateOfIncorporation") val dateOfIncorporation: kotlin.String? = null,

    /* Short description about the trust. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* The registered name, if different from the `name`. */
    @SerialName(value = "doingBusinessAs") val doingBusinessAs: kotlin.String? = null,

    @SerialName(value = "principalPlaceOfBusiness") val principalPlaceOfBusiness: Address? = null,

    /* The registration number. */
    @SerialName(value = "registrationNumber") val registrationNumber: kotlin.String? = null,

    /* The tax information of the entity. */
    @SerialName(value = "taxInformation") val taxInformation: kotlin.collections.List<TaxInformation>? = null,

    /* The undefined beneficiary information of the entity. */
    @SerialName(value = "undefinedBeneficiaryInfo") val undefinedBeneficiaryInfo: kotlin.collections.List<UndefinedBeneficiary>? = null,

    /* The reason for not providing a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**. */
    @SerialName(value = "vatAbsenceReason") val vatAbsenceReason: Trust.VatAbsenceReason? = null,

    /* The VAT number. */
    @SerialName(value = "vatNumber") val vatNumber: kotlin.String? = null

) {

    /**
     * Type of trust.  Possible values for Australian trusts: **cashManagementTrust**, **corporateUnitTrust**, **deceasedEstate**, **discretionaryInvestmentTrust**, **discretionaryServicesManagementTrust**, **discretionaryTradingTrust**, **firstHomeSaverAccountsTrust**, **fixedTrust**, **fixedUnitTrust**, **hybridTrust**, **listedPublicUnitTrust**, **otherTrust**, **pooledSuperannuationTrust**, **publicTradingTrust**, **unlistedPublicUnitTrust**.
     *
     * Values: CashManagementTrust,CorporateUnitTrust,DeceasedEstate,DiscretionaryInvestmentTrust,DiscretionaryServicesManagementTrust,DiscretionaryTradingTrust,FirstHomeSaverAccountsTrust,FixedTrust,FixedUnitTrust,HybridTrust,ListedPublicUnitTrust,OtherTrust,PooledSuperannuationTrust,PublicTradingTrust,UnlistedPublicUnitTrust
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "cashManagementTrust") CashManagementTrust("cashManagementTrust"),
        @SerialName(value = "corporateUnitTrust") CorporateUnitTrust("corporateUnitTrust"),
        @SerialName(value = "deceasedEstate") DeceasedEstate("deceasedEstate"),
        @SerialName(value = "discretionaryInvestmentTrust") DiscretionaryInvestmentTrust("discretionaryInvestmentTrust"),
        @SerialName(value = "discretionaryServicesManagementTrust") DiscretionaryServicesManagementTrust("discretionaryServicesManagementTrust"),
        @SerialName(value = "discretionaryTradingTrust") DiscretionaryTradingTrust("discretionaryTradingTrust"),
        @SerialName(value = "firstHomeSaverAccountsTrust") FirstHomeSaverAccountsTrust("firstHomeSaverAccountsTrust"),
        @SerialName(value = "fixedTrust") FixedTrust("fixedTrust"),
        @SerialName(value = "fixedUnitTrust") FixedUnitTrust("fixedUnitTrust"),
        @SerialName(value = "hybridTrust") HybridTrust("hybridTrust"),
        @SerialName(value = "listedPublicUnitTrust") ListedPublicUnitTrust("listedPublicUnitTrust"),
        @SerialName(value = "otherTrust") OtherTrust("otherTrust"),
        @SerialName(value = "pooledSuperannuationTrust") PooledSuperannuationTrust("pooledSuperannuationTrust"),
        @SerialName(value = "publicTradingTrust") PublicTradingTrust("publicTradingTrust"),
        @SerialName(value = "unlistedPublicUnitTrust") UnlistedPublicUnitTrust("unlistedPublicUnitTrust");
    }
    /**
     * The reason for not providing a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
     *
     * Values: IndustryExemption,BelowTaxThreshold
     */
    @Serializable
    enum class VatAbsenceReason(val value: kotlin.String) {
        @SerialName(value = "industryExemption") IndustryExemption("industryExemption"),
        @SerialName(value = "belowTaxThreshold") BelowTaxThreshold("belowTaxThreshold");
    }
}

