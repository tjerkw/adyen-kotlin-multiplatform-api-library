/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement

import com.adyen.model.legalentitymanagement.Address
import com.adyen.model.legalentitymanagement.PhoneNumber
import com.adyen.model.legalentitymanagement.StockData
import com.adyen.model.legalentitymanagement.TaxInformation
import com.adyen.model.legalentitymanagement.TaxReportingClassification
import com.adyen.model.legalentitymanagement.WebData

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param legalName The organization's legal name.
 * @param registeredAddress 
 * @param dateOfIncorporation The date when the organization was incorporated in YYYY-MM-DD format.
 * @param description Your description for the organization.
 * @param doingBusinessAs The organization's trading name, if different from the registered legal name.
 * @param email The email address of the legal entity.
 * @param phone 
 * @param principalPlaceOfBusiness 
 * @param registrationNumber The organization's registration number.
 * @param stockData 
 * @param taxInformation The tax information of the organization.
 * @param taxReportingClassification 
 * @param type Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
 * @param vatAbsenceReason The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
 * @param vatNumber The organization's VAT number.
 * @param webData 
 */
@Serializable
data class Organization (

    /* The organization's legal name. */
    @SerialName(value = "legalName") @Required val legalName: kotlin.String,

    @SerialName(value = "registeredAddress") @Required val registeredAddress: Address,

    /* The date when the organization was incorporated in YYYY-MM-DD format. */
    @SerialName(value = "dateOfIncorporation") val dateOfIncorporation: kotlin.String? = null,

    /* Your description for the organization. */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* The organization's trading name, if different from the registered legal name. */
    @SerialName(value = "doingBusinessAs") val doingBusinessAs: kotlin.String? = null,

    /* The email address of the legal entity. */
    @SerialName(value = "email") val email: kotlin.String? = null,

    @SerialName(value = "phone") val phone: PhoneNumber? = null,

    @SerialName(value = "principalPlaceOfBusiness") val principalPlaceOfBusiness: Address? = null,

    /* The organization's registration number. */
    @SerialName(value = "registrationNumber") val registrationNumber: kotlin.String? = null,

    @SerialName(value = "stockData") val stockData: StockData? = null,

    /* The tax information of the organization. */
    @SerialName(value = "taxInformation") val taxInformation: kotlin.collections.List<TaxInformation>? = null,

    @SerialName(value = "taxReportingClassification") val taxReportingClassification: TaxReportingClassification? = null,

    /* Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**. */
    @SerialName(value = "type") val type: Organization.Type? = null,

    /* The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**. */
    @SerialName(value = "vatAbsenceReason") val vatAbsenceReason: Organization.VatAbsenceReason? = null,

    /* The organization's VAT number. */
    @SerialName(value = "vatNumber") val vatNumber: kotlin.String? = null,

    @SerialName(value = "webData") val webData: WebData? = null

) {

    /**
     * Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
     *
     * Values: AssociationIncorporated,GovernmentalOrganization,ListedPublicCompany,NonProfit,PartnershipIncorporated,PrivateCompany
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "associationIncorporated") AssociationIncorporated("associationIncorporated"),
        @SerialName(value = "governmentalOrganization") GovernmentalOrganization("governmentalOrganization"),
        @SerialName(value = "listedPublicCompany") ListedPublicCompany("listedPublicCompany"),
        @SerialName(value = "nonProfit") NonProfit("nonProfit"),
        @SerialName(value = "partnershipIncorporated") PartnershipIncorporated("partnershipIncorporated"),
        @SerialName(value = "privateCompany") PrivateCompany("privateCompany");
    }
    /**
     * The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
     *
     * Values: IndustryExemption,BelowTaxThreshold
     */
    @Serializable
    enum class VatAbsenceReason(val value: kotlin.String) {
        @SerialName(value = "industryExemption") IndustryExemption("industryExemption"),
        @SerialName(value = "belowTaxThreshold") BelowTaxThreshold("belowTaxThreshold");
    }
}

