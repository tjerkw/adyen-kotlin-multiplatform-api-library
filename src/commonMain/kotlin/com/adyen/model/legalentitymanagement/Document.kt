/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement

import com.adyen.model.legalentitymanagement.Attachment
import com.adyen.model.legalentitymanagement.OwnerEntity

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param description Your description for the document.
 * @param type Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, **proofOfIndustry**, or **proofOfFundingOrWealthSource**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, **proofOfIndividualTaxId**, or **proofOfFundingOrWealthSource**.  * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
 * @param attachment 
 * @param attachments Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.
 * @param creationDate The creation date of the document.
 * @param expiryDate The expiry date of the document, in YYYY-MM-DD format.
 * @param fileName The filename of the document.
 * @param id The unique identifier of the document.
 * @param issuerCountry The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.
 * @param issuerState The state or province where the document was issued (AU only).
 * @param modificationDate The modification date of the document.
 * @param number The number in the document.
 * @param owner 
 */
@Serializable
data class Document (

    /* Your description for the document. */
    @SerialName(value = "description") @Required val description: kotlin.String,

    /* Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, **proofOfIndustry**, or **proofOfFundingOrWealthSource**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, **proofOfIndividualTaxId**, or **proofOfFundingOrWealthSource**.  * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id). */
    @SerialName(value = "type") @Required val type: Document.Type,

    @SerialName(value = "attachment") val attachment: Attachment? = null,

    /* Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document. */
    @SerialName(value = "attachments") val attachments: kotlin.collections.List<Attachment>? = null,

    /* The creation date of the document. */
    @SerialName(value = "creationDate") val creationDate: kotlin.String? = null,

    /* The expiry date of the document, in YYYY-MM-DD format. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "expiryDate") val expiryDate: kotlin.String? = null,

    /* The filename of the document. */
    @SerialName(value = "fileName") val fileName: kotlin.String? = null,

    /* The unique identifier of the document. */
    @SerialName(value = "id") val id: kotlin.String? = null,

    /* The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "issuerCountry") val issuerCountry: kotlin.String? = null,

    /* The state or province where the document was issued (AU only). */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "issuerState") val issuerState: kotlin.String? = null,

    /* The modification date of the document. */
    @SerialName(value = "modificationDate") val modificationDate: kotlin.String? = null,

    /* The number in the document. */
    @SerialName(value = "number") val number: kotlin.String? = null,

    @SerialName(value = "owner") val owner: OwnerEntity? = null

) {

    /**
     * Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, **proofOfIndustry**, or **proofOfFundingOrWealthSource**.  * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, **proofOfIndividualTaxId**, or **proofOfFundingOrWealthSource**.  * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
     *
     * Values: BankStatement,DriversLicense,IdentityCard,NationalIdNumber,Passport,ProofOfAddress,ProofOfNationalIdNumber,ProofOfResidency,RegistrationDocument,VatDocument,ProofOfOrganizationTaxInfo,ProofOfIndustry,ConstitutionalDocument,ProofOfFundingOrWealthSource
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "bankStatement") BankStatement("bankStatement"),
        @SerialName(value = "driversLicense") DriversLicense("driversLicense"),
        @SerialName(value = "identityCard") IdentityCard("identityCard"),
        @SerialName(value = "nationalIdNumber") NationalIdNumber("nationalIdNumber"),
        @SerialName(value = "passport") Passport("passport"),
        @SerialName(value = "proofOfAddress") ProofOfAddress("proofOfAddress"),
        @SerialName(value = "proofOfNationalIdNumber") ProofOfNationalIdNumber("proofOfNationalIdNumber"),
        @SerialName(value = "proofOfResidency") ProofOfResidency("proofOfResidency"),
        @SerialName(value = "registrationDocument") RegistrationDocument("registrationDocument"),
        @SerialName(value = "vatDocument") VatDocument("vatDocument"),
        @SerialName(value = "proofOfOrganizationTaxInfo") ProofOfOrganizationTaxInfo("proofOfOrganizationTaxInfo"),
        @SerialName(value = "proofOfIndustry") ProofOfIndustry("proofOfIndustry"),
        @SerialName(value = "constitutionalDocument") ConstitutionalDocument("constitutionalDocument"),
        @SerialName(value = "proofOfFundingOrWealthSource") ProofOfFundingOrWealthSource("proofOfFundingOrWealthSource");
    }
}

