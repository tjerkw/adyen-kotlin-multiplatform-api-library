/**
 * Legal Entity Management API
 *
 * The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value. For example:  ``` curl -H \"X-API-Key: YOUR_API_KEY\" \\ -H \"Content-Type: application/json\" \\ ... ``` Alternatively, you can use the username and password of your API credential to connect to the API using basic authentication. For example:  ``` curl -U \"ws_123456@Scope.Company_YOUR_COMPANY_ACCOUNT\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` ## Versioning The Legal Entity Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` >If you are using hosted onboarding, [only use v2](https://docs.adyen.com/release-notes/platforms-and-financial-products#releaseNote=2023-05-01-legal-entity-management-api-3) for your API requests.  ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.adyen.model.legalentitymanagement

import com.adyen.model.legalentitymanagement.RemediatingAction
import com.adyen.model.legalentitymanagement.VerificationErrorMinusRecursive

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param capabilities Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
 * @param code The general error code.
 * @param message The general error message.
 * @param remediatingActions An object containing possible solutions to fix a verification error.
 * @param subErrors An array containing more granular information about the cause of the verification error.
 * @param type The type of error.
 */
@Serializable
data class VerificationError (

    /* Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability. */
    @SerialName(value = "capabilities") val capabilities: kotlin.collections.List<VerificationError.Capabilities>? = null,

    /* The general error code. */
    @SerialName(value = "code") val code: kotlin.String? = null,

    /* The general error message. */
    @SerialName(value = "message") val message: kotlin.String? = null,

    /* An object containing possible solutions to fix a verification error. */
    @SerialName(value = "remediatingActions") val remediatingActions: kotlin.collections.List<RemediatingAction>? = null,

    /* An array containing more granular information about the cause of the verification error. */
    @SerialName(value = "subErrors") val subErrors: kotlin.collections.List<VerificationErrorMinusRecursive>? = null,

    /* The type of error. */
    @SerialName(value = "type") val type: VerificationError.Type? = null

) {

    /**
     * Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
     *
     * Values: AcceptExternalFunding,AcceptPspFunding,AcceptTransactionInRestrictedCountries,AcceptTransactionInRestrictedCountriesCommercial,AcceptTransactionInRestrictedCountriesConsumer,AcceptTransactionInRestrictedIndustries,AcceptTransactionInRestrictedIndustriesCommercial,AcceptTransactionInRestrictedIndustriesConsumer,Acquiring,AtmWithdrawal,AtmWithdrawalCommercial,AtmWithdrawalConsumer,AtmWithdrawalInRestrictedCountries,AtmWithdrawalInRestrictedCountriesCommercial,AtmWithdrawalInRestrictedCountriesConsumer,AuthorisedPaymentInstrumentUser,GetGrantOffers,IssueBankAccount,IssueCard,IssueCardCommercial,IssueCardConsumer,LocalAcceptance,Payout,PayoutToTransferInstrument,Processing,ReceiveFromBalanceAccount,ReceiveFromPlatformPayments,ReceiveFromThirdParty,ReceiveFromTransferInstrument,ReceiveGrants,ReceivePayments,SendToBalanceAccount,SendToThirdParty,SendToTransferInstrument,ThirdPartyFunding,UseCard,UseCardCommercial,UseCardConsumer,UseCardInRestrictedCountries,UseCardInRestrictedCountriesCommercial,UseCardInRestrictedCountriesConsumer,UseCardInRestrictedIndustries,UseCardInRestrictedIndustriesCommercial,UseCardInRestrictedIndustriesConsumer,WithdrawFromAtm,WithdrawFromAtmCommercial,WithdrawFromAtmConsumer,WithdrawFromAtmInRestrictedCountries,WithdrawFromAtmInRestrictedCountriesCommercial,WithdrawFromAtmInRestrictedCountriesConsumer
     */
    @Serializable
    enum class Capabilities(val value: kotlin.String) {
        @SerialName(value = "acceptExternalFunding") AcceptExternalFunding("acceptExternalFunding"),
        @SerialName(value = "acceptPspFunding") AcceptPspFunding("acceptPspFunding"),
        @SerialName(value = "acceptTransactionInRestrictedCountries") AcceptTransactionInRestrictedCountries("acceptTransactionInRestrictedCountries"),
        @SerialName(value = "acceptTransactionInRestrictedCountriesCommercial") AcceptTransactionInRestrictedCountriesCommercial("acceptTransactionInRestrictedCountriesCommercial"),
        @SerialName(value = "acceptTransactionInRestrictedCountriesConsumer") AcceptTransactionInRestrictedCountriesConsumer("acceptTransactionInRestrictedCountriesConsumer"),
        @SerialName(value = "acceptTransactionInRestrictedIndustries") AcceptTransactionInRestrictedIndustries("acceptTransactionInRestrictedIndustries"),
        @SerialName(value = "acceptTransactionInRestrictedIndustriesCommercial") AcceptTransactionInRestrictedIndustriesCommercial("acceptTransactionInRestrictedIndustriesCommercial"),
        @SerialName(value = "acceptTransactionInRestrictedIndustriesConsumer") AcceptTransactionInRestrictedIndustriesConsumer("acceptTransactionInRestrictedIndustriesConsumer"),
        @SerialName(value = "acquiring") Acquiring("acquiring"),
        @SerialName(value = "atmWithdrawal") AtmWithdrawal("atmWithdrawal"),
        @SerialName(value = "atmWithdrawalCommercial") AtmWithdrawalCommercial("atmWithdrawalCommercial"),
        @SerialName(value = "atmWithdrawalConsumer") AtmWithdrawalConsumer("atmWithdrawalConsumer"),
        @SerialName(value = "atmWithdrawalInRestrictedCountries") AtmWithdrawalInRestrictedCountries("atmWithdrawalInRestrictedCountries"),
        @SerialName(value = "atmWithdrawalInRestrictedCountriesCommercial") AtmWithdrawalInRestrictedCountriesCommercial("atmWithdrawalInRestrictedCountriesCommercial"),
        @SerialName(value = "atmWithdrawalInRestrictedCountriesConsumer") AtmWithdrawalInRestrictedCountriesConsumer("atmWithdrawalInRestrictedCountriesConsumer"),
        @SerialName(value = "authorisedPaymentInstrumentUser") AuthorisedPaymentInstrumentUser("authorisedPaymentInstrumentUser"),
        @SerialName(value = "getGrantOffers") GetGrantOffers("getGrantOffers"),
        @SerialName(value = "issueBankAccount") IssueBankAccount("issueBankAccount"),
        @SerialName(value = "issueCard") IssueCard("issueCard"),
        @SerialName(value = "issueCardCommercial") IssueCardCommercial("issueCardCommercial"),
        @SerialName(value = "issueCardConsumer") IssueCardConsumer("issueCardConsumer"),
        @SerialName(value = "localAcceptance") LocalAcceptance("localAcceptance"),
        @SerialName(value = "payout") Payout("payout"),
        @SerialName(value = "payoutToTransferInstrument") PayoutToTransferInstrument("payoutToTransferInstrument"),
        @SerialName(value = "processing") Processing("processing"),
        @SerialName(value = "receiveFromBalanceAccount") ReceiveFromBalanceAccount("receiveFromBalanceAccount"),
        @SerialName(value = "receiveFromPlatformPayments") ReceiveFromPlatformPayments("receiveFromPlatformPayments"),
        @SerialName(value = "receiveFromThirdParty") ReceiveFromThirdParty("receiveFromThirdParty"),
        @SerialName(value = "receiveFromTransferInstrument") ReceiveFromTransferInstrument("receiveFromTransferInstrument"),
        @SerialName(value = "receiveGrants") ReceiveGrants("receiveGrants"),
        @SerialName(value = "receivePayments") ReceivePayments("receivePayments"),
        @SerialName(value = "sendToBalanceAccount") SendToBalanceAccount("sendToBalanceAccount"),
        @SerialName(value = "sendToThirdParty") SendToThirdParty("sendToThirdParty"),
        @SerialName(value = "sendToTransferInstrument") SendToTransferInstrument("sendToTransferInstrument"),
        @SerialName(value = "thirdPartyFunding") ThirdPartyFunding("thirdPartyFunding"),
        @SerialName(value = "useCard") UseCard("useCard"),
        @SerialName(value = "useCardCommercial") UseCardCommercial("useCardCommercial"),
        @SerialName(value = "useCardConsumer") UseCardConsumer("useCardConsumer"),
        @SerialName(value = "useCardInRestrictedCountries") UseCardInRestrictedCountries("useCardInRestrictedCountries"),
        @SerialName(value = "useCardInRestrictedCountriesCommercial") UseCardInRestrictedCountriesCommercial("useCardInRestrictedCountriesCommercial"),
        @SerialName(value = "useCardInRestrictedCountriesConsumer") UseCardInRestrictedCountriesConsumer("useCardInRestrictedCountriesConsumer"),
        @SerialName(value = "useCardInRestrictedIndustries") UseCardInRestrictedIndustries("useCardInRestrictedIndustries"),
        @SerialName(value = "useCardInRestrictedIndustriesCommercial") UseCardInRestrictedIndustriesCommercial("useCardInRestrictedIndustriesCommercial"),
        @SerialName(value = "useCardInRestrictedIndustriesConsumer") UseCardInRestrictedIndustriesConsumer("useCardInRestrictedIndustriesConsumer"),
        @SerialName(value = "withdrawFromAtm") WithdrawFromAtm("withdrawFromAtm"),
        @SerialName(value = "withdrawFromAtmCommercial") WithdrawFromAtmCommercial("withdrawFromAtmCommercial"),
        @SerialName(value = "withdrawFromAtmConsumer") WithdrawFromAtmConsumer("withdrawFromAtmConsumer"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountries") WithdrawFromAtmInRestrictedCountries("withdrawFromAtmInRestrictedCountries"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountriesCommercial") WithdrawFromAtmInRestrictedCountriesCommercial("withdrawFromAtmInRestrictedCountriesCommercial"),
        @SerialName(value = "withdrawFromAtmInRestrictedCountriesConsumer") WithdrawFromAtmInRestrictedCountriesConsumer("withdrawFromAtmInRestrictedCountriesConsumer");
    }
    /**
     * The type of error.
     *
     * Values: DataMissing,DataReview,InvalidInput,PendingStatus,Rejected
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "dataMissing") DataMissing("dataMissing"),
        @SerialName(value = "dataReview") DataReview("dataReview"),
        @SerialName(value = "invalidInput") InvalidInput("invalidInput"),
        @SerialName(value = "pendingStatus") PendingStatus("pendingStatus"),
        @SerialName(value = "rejected") Rejected("rejected");
    }
}

